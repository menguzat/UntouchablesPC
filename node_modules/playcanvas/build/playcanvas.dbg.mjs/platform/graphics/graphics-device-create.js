import { Debug } from '../../core/debug.js';
import { platform } from '../../core/platform.js';
import { WebgpuGraphicsDevice } from './webgpu/webgpu-graphics-device.js';
import { DEVICETYPE_WEBGL2, DEVICETYPE_WEBGL1, DEVICETYPE_WEBGPU } from './constants.js';
import { WebglGraphicsDevice } from './webgl/webgl-graphics-device.js';

/**
 * Creates a graphics device.
 *
 * @param {HTMLCanvasElement} canvas - The canvas element.
 * @param {object} options - Graphics device options.
 * @param {string[]} [options.deviceTypes] - An array of DEVICETYPE_*** constants, defining the
 * order in which the devices are attempted to get created. Defaults to an empty array. If the
 * specified array does not contain [{@link DEVICETYPE_WEBGL2} or {@link DEVICETYPE_WEBGL1}], those
 * are internally added to its end in this order. Typically, you'd only specify
 * {@link DEVICETYPE_WEBGPU}, or leave it empty.
 * @param {boolean} [options.antialias] - Boolean that indicates whether or not to perform
 * anti-aliasing if possible. Defaults to true.
 * @param {boolean} [options.depth=true] - Boolean that indicates that the drawing buffer is
 * requested to have a depth buffer of at least 16 bits.
 * @param {boolean} [options.stencil=true] - Boolean that indicates that the drawing buffer is
 * requested to have a stencil buffer of at least 8 bits.
 * @param {string} [options.glslangUrl] - An url to glslang script, required if
 * {@link DEVICETYPE_WEBGPU} type is added to deviceTypes array. Not used for
 * {@link DEVICETYPE_WEBGL} device type creation.
 * @param {string} [options.twgslUrl] - An url to twgsl script, required if glslangUrl was specified.
 * @param {boolean} [options.xrCompatible] - Boolean that hints to the user agent to use a
 * compatible graphics adapter for an immersive XR device.
 * @returns {Promise} - Promise object representing the created graphics device.
 */
function createGraphicsDevice(canvas, options = {}) {
  var _options$deviceTypes;
  const deviceTypes = (_options$deviceTypes = options.deviceTypes) != null ? _options$deviceTypes : [];

  // automatically added fallbacks
  if (!deviceTypes.includes(DEVICETYPE_WEBGL2)) {
    deviceTypes.push(DEVICETYPE_WEBGL2);
  }
  if (!deviceTypes.includes(DEVICETYPE_WEBGL1)) {
    deviceTypes.push(DEVICETYPE_WEBGL1);
  }

  // XR compatibility if not specified
  if (platform.browser && !!navigator.xr) {
    var _options$xrCompatible;
    (_options$xrCompatible = options.xrCompatible) != null ? _options$xrCompatible : options.xrCompatible = true;
  }
  let device;
  for (let i = 0; i < deviceTypes.length; i++) {
    var _window, _window$navigator;
    const deviceType = deviceTypes[i];
    if (deviceType === DEVICETYPE_WEBGPU && (_window = window) != null && (_window$navigator = _window.navigator) != null && _window$navigator.gpu) {
      device = new WebgpuGraphicsDevice(canvas, options);
      return device.initWebGpu(options.glslangUrl, options.twgslUrl);
    }
    if (deviceType !== DEVICETYPE_WEBGPU) {
      options.preferWebGl2 = deviceType === DEVICETYPE_WEBGL2;
      device = new WebglGraphicsDevice(canvas, options);
      return Promise.resolve(device);
    }
  }
  Debug.assert(device, 'Failed to allocate graphics device based on requested device types: ', options.deviceTypes);
  return Promise.reject(new Error("Failed to allocate graphics device"));
}

export { createGraphicsDevice };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhpY3MtZGV2aWNlLWNyZWF0ZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BsYXRmb3JtL2dyYXBoaWNzL2dyYXBoaWNzLWRldmljZS1jcmVhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWcgfSBmcm9tICcuLi8uLi9jb3JlL2RlYnVnLmpzJztcbmltcG9ydCB7IHBsYXRmb3JtIH0gZnJvbSAnLi4vLi4vY29yZS9wbGF0Zm9ybS5qcyc7XG5cbmltcG9ydCB7IFdlYmdwdUdyYXBoaWNzRGV2aWNlIH0gZnJvbSAnLi93ZWJncHUvd2ViZ3B1LWdyYXBoaWNzLWRldmljZS5qcyc7XG5pbXBvcnQgeyBERVZJQ0VUWVBFX1dFQkdMMiwgREVWSUNFVFlQRV9XRUJHTDEsIERFVklDRVRZUEVfV0VCR1BVIH0gZnJvbSAnLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgV2ViZ2xHcmFwaGljc0RldmljZSB9IGZyb20gJy4vd2ViZ2wvd2ViZ2wtZ3JhcGhpY3MtZGV2aWNlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZ3JhcGhpY3MgZGV2aWNlLlxuICpcbiAqIEBwYXJhbSB7SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhcyAtIFRoZSBjYW52YXMgZWxlbWVudC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gR3JhcGhpY3MgZGV2aWNlIG9wdGlvbnMuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBbb3B0aW9ucy5kZXZpY2VUeXBlc10gLSBBbiBhcnJheSBvZiBERVZJQ0VUWVBFXyoqKiBjb25zdGFudHMsIGRlZmluaW5nIHRoZVxuICogb3JkZXIgaW4gd2hpY2ggdGhlIGRldmljZXMgYXJlIGF0dGVtcHRlZCB0byBnZXQgY3JlYXRlZC4gRGVmYXVsdHMgdG8gYW4gZW1wdHkgYXJyYXkuIElmIHRoZVxuICogc3BlY2lmaWVkIGFycmF5IGRvZXMgbm90IGNvbnRhaW4gW3tAbGluayBERVZJQ0VUWVBFX1dFQkdMMn0gb3Ige0BsaW5rIERFVklDRVRZUEVfV0VCR0wxfV0sIHRob3NlXG4gKiBhcmUgaW50ZXJuYWxseSBhZGRlZCB0byBpdHMgZW5kIGluIHRoaXMgb3JkZXIuIFR5cGljYWxseSwgeW91J2Qgb25seSBzcGVjaWZ5XG4gKiB7QGxpbmsgREVWSUNFVFlQRV9XRUJHUFV9LCBvciBsZWF2ZSBpdCBlbXB0eS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYW50aWFsaWFzXSAtIEJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgd2hldGhlciBvciBub3QgdG8gcGVyZm9ybVxuICogYW50aS1hbGlhc2luZyBpZiBwb3NzaWJsZS4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZGVwdGg9dHJ1ZV0gLSBCb29sZWFuIHRoYXQgaW5kaWNhdGVzIHRoYXQgdGhlIGRyYXdpbmcgYnVmZmVyIGlzXG4gKiByZXF1ZXN0ZWQgdG8gaGF2ZSBhIGRlcHRoIGJ1ZmZlciBvZiBhdCBsZWFzdCAxNiBiaXRzLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5zdGVuY2lsPXRydWVdIC0gQm9vbGVhbiB0aGF0IGluZGljYXRlcyB0aGF0IHRoZSBkcmF3aW5nIGJ1ZmZlciBpc1xuICogcmVxdWVzdGVkIHRvIGhhdmUgYSBzdGVuY2lsIGJ1ZmZlciBvZiBhdCBsZWFzdCA4IGJpdHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuZ2xzbGFuZ1VybF0gLSBBbiB1cmwgdG8gZ2xzbGFuZyBzY3JpcHQsIHJlcXVpcmVkIGlmXG4gKiB7QGxpbmsgREVWSUNFVFlQRV9XRUJHUFV9IHR5cGUgaXMgYWRkZWQgdG8gZGV2aWNlVHlwZXMgYXJyYXkuIE5vdCB1c2VkIGZvclxuICoge0BsaW5rIERFVklDRVRZUEVfV0VCR0x9IGRldmljZSB0eXBlIGNyZWF0aW9uLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnR3Z3NsVXJsXSAtIEFuIHVybCB0byB0d2dzbCBzY3JpcHQsIHJlcXVpcmVkIGlmIGdsc2xhbmdVcmwgd2FzIHNwZWNpZmllZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMueHJDb21wYXRpYmxlXSAtIEJvb2xlYW4gdGhhdCBoaW50cyB0byB0aGUgdXNlciBhZ2VudCB0byB1c2UgYVxuICogY29tcGF0aWJsZSBncmFwaGljcyBhZGFwdGVyIGZvciBhbiBpbW1lcnNpdmUgWFIgZGV2aWNlLlxuICogQHJldHVybnMge1Byb21pc2V9IC0gUHJvbWlzZSBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSBjcmVhdGVkIGdyYXBoaWNzIGRldmljZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlR3JhcGhpY3NEZXZpY2UoY2FudmFzLCBvcHRpb25zID0ge30pIHtcblxuICAgIGNvbnN0IGRldmljZVR5cGVzID0gb3B0aW9ucy5kZXZpY2VUeXBlcyA/PyBbXTtcblxuICAgIC8vIGF1dG9tYXRpY2FsbHkgYWRkZWQgZmFsbGJhY2tzXG4gICAgaWYgKCFkZXZpY2VUeXBlcy5pbmNsdWRlcyhERVZJQ0VUWVBFX1dFQkdMMikpIHtcbiAgICAgICAgZGV2aWNlVHlwZXMucHVzaChERVZJQ0VUWVBFX1dFQkdMMik7XG4gICAgfVxuICAgIGlmICghZGV2aWNlVHlwZXMuaW5jbHVkZXMoREVWSUNFVFlQRV9XRUJHTDEpKSB7XG4gICAgICAgIGRldmljZVR5cGVzLnB1c2goREVWSUNFVFlQRV9XRUJHTDEpO1xuICAgIH1cblxuICAgIC8vIFhSIGNvbXBhdGliaWxpdHkgaWYgbm90IHNwZWNpZmllZFxuICAgIGlmIChwbGF0Zm9ybS5icm93c2VyICYmICEhbmF2aWdhdG9yLnhyKSB7XG4gICAgICAgIG9wdGlvbnMueHJDb21wYXRpYmxlID8/PSB0cnVlO1xuICAgIH1cblxuICAgIGxldCBkZXZpY2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXZpY2VUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBkZXZpY2VUeXBlID0gZGV2aWNlVHlwZXNbaV07XG5cbiAgICAgICAgaWYgKGRldmljZVR5cGUgPT09IERFVklDRVRZUEVfV0VCR1BVICYmIHdpbmRvdz8ubmF2aWdhdG9yPy5ncHUpIHtcbiAgICAgICAgICAgIGRldmljZSA9IG5ldyBXZWJncHVHcmFwaGljc0RldmljZShjYW52YXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIGRldmljZS5pbml0V2ViR3B1KG9wdGlvbnMuZ2xzbGFuZ1VybCwgb3B0aW9ucy50d2dzbFVybCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGV2aWNlVHlwZSAhPT0gREVWSUNFVFlQRV9XRUJHUFUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucHJlZmVyV2ViR2wyID0gZGV2aWNlVHlwZSA9PT0gREVWSUNFVFlQRV9XRUJHTDI7XG4gICAgICAgICAgICBkZXZpY2UgPSBuZXcgV2ViZ2xHcmFwaGljc0RldmljZShjYW52YXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkZXZpY2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgRGVidWcuYXNzZXJ0KGRldmljZSwgJ0ZhaWxlZCB0byBhbGxvY2F0ZSBncmFwaGljcyBkZXZpY2UgYmFzZWQgb24gcmVxdWVzdGVkIGRldmljZSB0eXBlczogJywgb3B0aW9ucy5kZXZpY2VUeXBlcyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byBhbGxvY2F0ZSBncmFwaGljcyBkZXZpY2VcIikpO1xufVxuXG5leHBvcnQgeyBjcmVhdGVHcmFwaGljc0RldmljZSB9O1xuIl0sIm5hbWVzIjpbImNyZWF0ZUdyYXBoaWNzRGV2aWNlIiwiY2FudmFzIiwib3B0aW9ucyIsIl9vcHRpb25zJGRldmljZVR5cGVzIiwiZGV2aWNlVHlwZXMiLCJpbmNsdWRlcyIsIkRFVklDRVRZUEVfV0VCR0wyIiwicHVzaCIsIkRFVklDRVRZUEVfV0VCR0wxIiwicGxhdGZvcm0iLCJicm93c2VyIiwibmF2aWdhdG9yIiwieHIiLCJfb3B0aW9ucyR4ckNvbXBhdGlibGUiLCJ4ckNvbXBhdGlibGUiLCJkZXZpY2UiLCJpIiwibGVuZ3RoIiwiX3dpbmRvdyIsIl93aW5kb3ckbmF2aWdhdG9yIiwiZGV2aWNlVHlwZSIsIkRFVklDRVRZUEVfV0VCR1BVIiwid2luZG93IiwiZ3B1IiwiV2ViZ3B1R3JhcGhpY3NEZXZpY2UiLCJpbml0V2ViR3B1IiwiZ2xzbGFuZ1VybCIsInR3Z3NsVXJsIiwicHJlZmVyV2ViR2wyIiwiV2ViZ2xHcmFwaGljc0RldmljZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiRGVidWciLCJhc3NlcnQiLCJyZWplY3QiLCJFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0Esb0JBQW9CQSxDQUFDQyxNQUFNLEVBQUVDLE9BQU8sR0FBRyxFQUFFLEVBQUU7QUFBQSxFQUFBLElBQUFDLG9CQUFBLENBQUE7RUFFaEQsTUFBTUMsV0FBVyxHQUFBRCxDQUFBQSxvQkFBQSxHQUFHRCxPQUFPLENBQUNFLFdBQVcsS0FBQSxJQUFBLEdBQUFELG9CQUFBLEdBQUksRUFBRSxDQUFBOztBQUU3QztBQUNBLEVBQUEsSUFBSSxDQUFDQyxXQUFXLENBQUNDLFFBQVEsQ0FBQ0MsaUJBQWlCLENBQUMsRUFBRTtBQUMxQ0YsSUFBQUEsV0FBVyxDQUFDRyxJQUFJLENBQUNELGlCQUFpQixDQUFDLENBQUE7QUFDdkMsR0FBQTtBQUNBLEVBQUEsSUFBSSxDQUFDRixXQUFXLENBQUNDLFFBQVEsQ0FBQ0csaUJBQWlCLENBQUMsRUFBRTtBQUMxQ0osSUFBQUEsV0FBVyxDQUFDRyxJQUFJLENBQUNDLGlCQUFpQixDQUFDLENBQUE7QUFDdkMsR0FBQTs7QUFFQTtFQUNBLElBQUlDLFFBQVEsQ0FBQ0MsT0FBTyxJQUFJLENBQUMsQ0FBQ0MsU0FBUyxDQUFDQyxFQUFFLEVBQUU7QUFBQSxJQUFBLElBQUFDLHFCQUFBLENBQUE7QUFDcEMsSUFBQSxDQUFBQSxxQkFBQSxHQUFBWCxPQUFPLENBQUNZLFlBQVksS0FBQSxJQUFBLEdBQUFELHFCQUFBLEdBQXBCWCxPQUFPLENBQUNZLFlBQVksR0FBSyxJQUFJLENBQUE7QUFDakMsR0FBQTtBQUVBLEVBQUEsSUFBSUMsTUFBTSxDQUFBO0FBQ1YsRUFBQSxLQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR1osV0FBVyxDQUFDYSxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQUEsSUFBQUUsT0FBQSxFQUFBQyxpQkFBQSxDQUFBO0FBQ3pDLElBQUEsTUFBTUMsVUFBVSxHQUFHaEIsV0FBVyxDQUFDWSxDQUFDLENBQUMsQ0FBQTtBQUVqQyxJQUFBLElBQUlJLFVBQVUsS0FBS0MsaUJBQWlCLElBQUFILENBQUFBLE9BQUEsR0FBSUksTUFBTSxLQUFBLElBQUEsSUFBQSxDQUFBSCxpQkFBQSxHQUFORCxPQUFBLENBQVFQLFNBQVMsYUFBakJRLGlCQUFBLENBQW1CSSxHQUFHLEVBQUU7QUFDNURSLE1BQUFBLE1BQU0sR0FBRyxJQUFJUyxvQkFBb0IsQ0FBQ3ZCLE1BQU0sRUFBRUMsT0FBTyxDQUFDLENBQUE7TUFDbEQsT0FBT2EsTUFBTSxDQUFDVSxVQUFVLENBQUN2QixPQUFPLENBQUN3QixVQUFVLEVBQUV4QixPQUFPLENBQUN5QixRQUFRLENBQUMsQ0FBQTtBQUNsRSxLQUFBO0lBRUEsSUFBSVAsVUFBVSxLQUFLQyxpQkFBaUIsRUFBRTtBQUNsQ25CLE1BQUFBLE9BQU8sQ0FBQzBCLFlBQVksR0FBR1IsVUFBVSxLQUFLZCxpQkFBaUIsQ0FBQTtBQUN2RFMsTUFBQUEsTUFBTSxHQUFHLElBQUljLG1CQUFtQixDQUFDNUIsTUFBTSxFQUFFQyxPQUFPLENBQUMsQ0FBQTtBQUNqRCxNQUFBLE9BQU80QixPQUFPLENBQUNDLE9BQU8sQ0FBQ2hCLE1BQU0sQ0FBQyxDQUFBO0FBQ2xDLEtBQUE7QUFDSixHQUFBO0VBRUFpQixLQUFLLENBQUNDLE1BQU0sQ0FBQ2xCLE1BQU0sRUFBRSxzRUFBc0UsRUFBRWIsT0FBTyxDQUFDRSxXQUFXLENBQUMsQ0FBQTtFQUNqSCxPQUFPMEIsT0FBTyxDQUFDSSxNQUFNLENBQUMsSUFBSUMsS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUMsQ0FBQTtBQUMxRTs7OzsifQ==
