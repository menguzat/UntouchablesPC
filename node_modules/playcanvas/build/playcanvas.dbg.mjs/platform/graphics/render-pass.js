import { Debug } from '../../core/debug.js';
import { Tracing } from '../../core/tracing.js';
import { Color } from '../../core/math/color.js';
import { TRACEID_RENDER_PASS, TRACEID_RENDER_PASS_DETAIL } from '../../core/constants.js';
import { DebugGraphics } from './debug-graphics.js';

class ColorAttachmentOps {
  constructor() {
    /**
     * A color used to clear the color attachment when the clear is enabled.
     */
    this.clearValue = new Color(0, 0, 0, 1);
    /**
     * True if the attachment should be cleared before rendering, false to preserve
     * the existing content.
     */
    this.clear = false;
    /**
     * True if the attachment needs to be stored after the render pass. False
     * if it can be discarded.
     * Note: This relates to the surface that is getting rendered to, and can be either
     * single or multi-sampled. Further, if a multi-sampled surface is used, the resolve
     * flag further specifies if this gets resolved to a single-sampled surface. This
     * behavior matches the WebGPU specification.
     *
     * @type {boolean}
     */
    this.store = false;
    /**
     * True if the attachment needs to be resolved.
     *
     * @type {boolean}
     */
    this.resolve = true;
    /**
     * True if the attachment needs to have mipmaps generated.
     *
     * @type {boolean}
     */
    this.mipmaps = false;
  }
}
class DepthStencilAttachmentOps {
  constructor() {
    /**
     * A depth value used to clear the depth attachment when the clear is enabled.
     */
    this.clearDepthValue = 1;
    /**
     * A stencil value used to clear the stencil attachment when the clear is enabled.
     */
    this.clearStencilValue = 0;
    /**
     * True if the depth attachment should be cleared before rendering, false to preserve
     * the existing content.
     */
    this.clearDepth = false;
    /**
     * True if the stencil attachment should be cleared before rendering, false to preserve
     * the existing content.
     */
    this.clearStencil = false;
    /**
     * True if the depth attachment needs to be stored after the render pass. False
     * if it can be discarded.
     *
     * @type {boolean}
     */
    this.storeDepth = false;
    /**
     * True if the stencil attachment needs to be stored after the render pass. False
     * if it can be discarded.
     *
     * @type {boolean}
     */
    this.storeStencil = false;
  }
}

/**
 * A render pass represents a node in the frame graph, and encapsulates a system which
 * renders to a render target using an execution callback.
 *
 * @ignore
 */
class RenderPass {
  /**
   * Creates an instance of the RenderPass.
   *
   * @param {import('../graphics/graphics-device.js').GraphicsDevice} graphicsDevice - The
   * graphics device.
   * @param {Function} [execute] - Custom function that is called to render the pass.
   */
  constructor(graphicsDevice, execute) {
    /** @type {string} */
    this.name = void 0;
    /** @type {import('../graphics/render-target.js').RenderTarget} */
    this.renderTarget = void 0;
    /**
     * Number of samples. 0 if no render target, otherwise number of samples from the render target,
     * or the main framebuffer if render target is null.
     *
     * @type {number}
     */
    this.samples = 0;
    /** @type {ColorAttachmentOps} */
    this.colorOps = void 0;
    /** @type {DepthStencilAttachmentOps} */
    this.depthStencilOps = void 0;
    /**
     * If true, this pass might use dynamically rendered cubemaps. Use for a case where rendering to cubemap
     * faces is interleaved with rendering to shadows, to avoid generating cubemap mipmaps. This will likely
     * be retired when render target dependency tracking gets implemented.
     *
     * @type {boolean}
     */
    this.requiresCubemaps = true;
    /**
     * True if the render pass uses the full viewport / scissor for rendering into the render target.
     *
     * @type {boolean}
     */
    this.fullSizeClearRect = true;
    /**
     * Custom function that is called to render the pass.
     *
     * @type {Function}
     */
    this.execute = void 0;
    /**
     * Custom function that is called before the pass has started.
     *
     * @type {Function}
     */
    this.before = void 0;
    /**
     * Custom function that is called after the pass has fnished.
     *
     * @type {Function}
     */
    this.after = void 0;
    this.device = graphicsDevice;

    /** @type {Function} */
    this.execute = execute;
  }

  /**
   * @param {import('../graphics/render-target.js').RenderTarget} renderTarget - The render
   * target to render into (output). This function should be called only for render passes which
   * use render target, or passes which render directly into the default framebuffer, in which
   * case a null or undefined render target is expected.
   */
  init(renderTarget) {
    var _this$renderTarget, _this$renderTarget$co;
    // null represents the default framebuffer
    this.renderTarget = renderTarget || null;

    // allocate ops only when render target is used
    this.colorOps = new ColorAttachmentOps();
    this.depthStencilOps = new DepthStencilAttachmentOps();

    // defaults depend on multisampling
    this.samples = Math.max(this.renderTarget ? this.renderTarget.samples : this.device.samples, 1);

    // if rendering to single-sampled buffer, this buffer needs to be stored
    if (this.samples === 1) {
      this.colorOps.store = true;
      this.colorOps.resolve = false;
    }

    // if render target needs mipmaps
    if ((_this$renderTarget = this.renderTarget) != null && (_this$renderTarget$co = _this$renderTarget.colorBuffer) != null && _this$renderTarget$co.mipmaps) {
      this.colorOps.mipmaps = true;
    }
  }

  /**
   * Mark render pass as clearing the full color buffer.
   *
   * @param {Color} color - The color to clear to.
   */
  setClearColor(color) {
    this.colorOps.clearValue.copy(color);
    this.colorOps.clear = true;
  }

  /**
   * Mark render pass as clearing the full depth buffer.
   *
   * @param {number} depthValue - The depth value to clear to.
   */
  setClearDepth(depthValue) {
    this.depthStencilOps.clearDepthValue = depthValue;
    this.depthStencilOps.clearDepth = true;
  }

  /**
   * Mark render pass as clearing the full stencil buffer.
   *
   * @param {number} stencilValue - The stencil value to clear to.
   */
  setClearStencil(stencilValue) {
    this.depthStencilOps.clearStencilValue = stencilValue;
    this.depthStencilOps.clearStencil = true;
  }

  /**
   * Render the render pass
   */
  render() {
    var _this$before, _this$execute, _this$after;
    const device = this.device;
    const realPass = this.renderTarget !== undefined;
    DebugGraphics.pushGpuMarker(device, `Pass:${this.name}`);
    Debug.call(() => {
      this.log(device, device.renderPassIndex);
    });
    (_this$before = this.before) == null ? void 0 : _this$before.call(this);
    if (realPass) {
      device.startPass(this);
    }
    (_this$execute = this.execute) == null ? void 0 : _this$execute.call(this);
    if (realPass) {
      device.endPass(this);
    }
    (_this$after = this.after) == null ? void 0 : _this$after.call(this);
    device.renderPassIndex++;
    DebugGraphics.popGpuMarker(device);
  }
  log(device, index) {
    if (Tracing.get(TRACEID_RENDER_PASS) || Tracing.get(TRACEID_RENDER_PASS_DETAIL)) {
      var _rt$colorBuffer, _rt, _rt2, _rt3, _rt4;
      let rt = this.renderTarget;
      if (rt === null && device.isWebGPU) {
        rt = device.frameBuffer;
      }
      const hasColor = (_rt$colorBuffer = (_rt = rt) == null ? void 0 : _rt.colorBuffer) != null ? _rt$colorBuffer : (_rt2 = rt) == null ? void 0 : _rt2.impl.assignedColorTexture;
      const hasDepth = (_rt3 = rt) == null ? void 0 : _rt3.depth;
      const hasStencil = (_rt4 = rt) == null ? void 0 : _rt4.stencil;
      const rtInfo = rt === undefined ? '' : ` RT: ${rt ? rt.name : 'NULL'} ` + `${hasColor ? '[Color]' : ''}` + `${hasDepth ? '[Depth]' : ''}` + `${hasStencil ? '[Stencil]' : ''}` + `${this.samples > 0 ? ' samples: ' + this.samples : ''}`;
      Debug.trace(TRACEID_RENDER_PASS, `${index.toString().padEnd(2, ' ')}: ${this.name.padEnd(20, ' ')}` + rtInfo.padEnd(30));
      if (this.colorOps && hasColor) {
        Debug.trace(TRACEID_RENDER_PASS_DETAIL, `    colorOps: ` + `${this.colorOps.clear ? 'clear' : 'load'}->` + `${this.colorOps.store ? 'store' : 'discard'} ` + `${this.colorOps.resolve ? 'resolve ' : ''}` + `${this.colorOps.mipmaps ? 'mipmaps ' : ''}`);
      }
      if (this.depthStencilOps) {
        if (hasDepth) {
          Debug.trace(TRACEID_RENDER_PASS_DETAIL, `    depthOps: ` + `${this.depthStencilOps.clearDepth ? 'clear' : 'load'}->` + `${this.depthStencilOps.storeDepth ? 'store' : 'discard'}`);
        }
        if (hasStencil) {
          Debug.trace(TRACEID_RENDER_PASS_DETAIL, `    stencOps: ` + `${this.depthStencilOps.clearStencil ? 'clear' : 'load'}->` + `${this.depthStencilOps.storeStencil ? 'store' : 'discard'}`);
        }
      }
    }
  }
}

export { ColorAttachmentOps, DepthStencilAttachmentOps, RenderPass };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
