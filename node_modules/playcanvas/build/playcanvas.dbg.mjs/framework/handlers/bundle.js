import { platform } from '../../core/platform.js';
import { http, Http } from '../../platform/net/http.js';
import { Bundle } from '../bundle/bundle.js';
import { UntarWorker, Untar } from './untar.js';

/** @typedef {import('./handler.js').ResourceHandler} ResourceHandler */

/**
 * Loads Bundle Assets.
 *
 * @implements {ResourceHandler}
 * @ignore
 */
class BundleHandler {
  /**
   * Create a new BundleHandler instance.
   *
   * @param {import('../app-base.js').AppBase} app - The running {@link AppBase}.
   * @hideconstructor
   */
  constructor(app) {
    /**
     * Type of the resource the handler handles.
     *
     * @type {string}
     */
    this.handlerType = "bundle";
    this._assets = app.assets;
    this._worker = null;
    this.maxRetries = 0;
  }
  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }
    const self = this;
    http.get(url.load, {
      responseType: Http.ResponseType.ARRAY_BUFFER,
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    }, function (err, response) {
      if (!err) {
        try {
          self._untar(response, callback);
        } catch (ex) {
          callback('Error loading bundle resource ' + url.original + ': ' + ex);
        }
      } else {
        callback('Error loading bundle resource ' + url.original + ': ' + err);
      }
    });
  }
  _untar(response, callback) {
    const self = this;

    // use web workers if available otherwise
    // fallback to untar'ing in the main thread
    if (platform.workers) {
      // create web worker if necessary
      if (!self._worker) {
        self._worker = new UntarWorker(self._assets.prefix);
      }
      self._worker.untar(response, function (err, files) {
        callback(err, files);

        // if we have no more requests for this worker then
        // destroy it
        if (!self._worker.hasPendingRequests()) {
          self._worker.destroy();
          self._worker = null;
        }
      });
    } else {
      const archive = new Untar(response);
      const files = archive.untar(self._assets.prefix);
      callback(null, files);
    }
  }
  open(url, data) {
    return new Bundle(data);
  }
  patch(asset, assets) {}
}

export { BundleHandler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2hhbmRsZXJzL2J1bmRsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwbGF0Zm9ybSB9IGZyb20gJy4uLy4uL2NvcmUvcGxhdGZvcm0uanMnO1xuXG5pbXBvcnQgeyBodHRwLCBIdHRwIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vbmV0L2h0dHAuanMnO1xuXG5pbXBvcnQgeyBCdW5kbGUgfSBmcm9tICcuLi9idW5kbGUvYnVuZGxlLmpzJztcbmltcG9ydCB7IFVudGFyLCBVbnRhcldvcmtlciB9IGZyb20gJy4vdW50YXIuanMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9oYW5kbGVyLmpzJykuUmVzb3VyY2VIYW5kbGVyfSBSZXNvdXJjZUhhbmRsZXIgKi9cblxuLyoqXG4gKiBMb2FkcyBCdW5kbGUgQXNzZXRzLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtSZXNvdXJjZUhhbmRsZXJ9XG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIEJ1bmRsZUhhbmRsZXIge1xuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgdGhlIHJlc291cmNlIHRoZSBoYW5kbGVyIGhhbmRsZXMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGhhbmRsZXJUeXBlID0gXCJidW5kbGVcIjtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBCdW5kbGVIYW5kbGVyIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uL2FwcC1iYXNlLmpzJykuQXBwQmFzZX0gYXBwIC0gVGhlIHJ1bm5pbmcge0BsaW5rIEFwcEJhc2V9LlxuICAgICAqIEBoaWRlY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhcHApIHtcbiAgICAgICAgdGhpcy5fYXNzZXRzID0gYXBwLmFzc2V0cztcbiAgICAgICAgdGhpcy5fd29ya2VyID0gbnVsbDtcbiAgICAgICAgdGhpcy5tYXhSZXRyaWVzID0gMDtcbiAgICB9XG5cbiAgICBsb2FkKHVybCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB1cmwgPSB7XG4gICAgICAgICAgICAgICAgbG9hZDogdXJsLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsOiB1cmxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICBodHRwLmdldCh1cmwubG9hZCwge1xuICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiBIdHRwLlJlc3BvbnNlVHlwZS5BUlJBWV9CVUZGRVIsXG4gICAgICAgICAgICByZXRyeTogdGhpcy5tYXhSZXRyaWVzID4gMCxcbiAgICAgICAgICAgIG1heFJldHJpZXM6IHRoaXMubWF4UmV0cmllc1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyLCByZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLl91bnRhcihyZXNwb25zZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdFcnJvciBsb2FkaW5nIGJ1bmRsZSByZXNvdXJjZSAnICsgdXJsLm9yaWdpbmFsICsgJzogJyArIGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdFcnJvciBsb2FkaW5nIGJ1bmRsZSByZXNvdXJjZSAnICsgdXJsLm9yaWdpbmFsICsgJzogJyArIGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF91bnRhcihyZXNwb25zZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gdXNlIHdlYiB3b3JrZXJzIGlmIGF2YWlsYWJsZSBvdGhlcndpc2VcbiAgICAgICAgLy8gZmFsbGJhY2sgdG8gdW50YXInaW5nIGluIHRoZSBtYWluIHRocmVhZFxuICAgICAgICBpZiAocGxhdGZvcm0ud29ya2Vycykge1xuICAgICAgICAgICAgLy8gY3JlYXRlIHdlYiB3b3JrZXIgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICBpZiAoIXNlbGYuX3dvcmtlcikge1xuICAgICAgICAgICAgICAgIHNlbGYuX3dvcmtlciA9IG5ldyBVbnRhcldvcmtlcihzZWxmLl9hc3NldHMucHJlZml4KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZi5fd29ya2VyLnVudGFyKHJlc3BvbnNlLCBmdW5jdGlvbiAoZXJyLCBmaWxlcykge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgZmlsZXMpO1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBubyBtb3JlIHJlcXVlc3RzIGZvciB0aGlzIHdvcmtlciB0aGVuXG4gICAgICAgICAgICAgICAgLy8gZGVzdHJveSBpdFxuICAgICAgICAgICAgICAgIGlmICghc2VsZi5fd29ya2VyLmhhc1BlbmRpbmdSZXF1ZXN0cygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3dvcmtlci5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3dvcmtlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBhcmNoaXZlID0gbmV3IFVudGFyKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVzID0gYXJjaGl2ZS51bnRhcihzZWxmLl9hc3NldHMucHJlZml4KTtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGZpbGVzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wZW4odXJsLCBkYXRhKSB7XG4gICAgICAgIHJldHVybiBuZXcgQnVuZGxlKGRhdGEpO1xuICAgIH1cblxuICAgIHBhdGNoKGFzc2V0LCBhc3NldHMpIHtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEJ1bmRsZUhhbmRsZXIgfTtcbiJdLCJuYW1lcyI6WyJCdW5kbGVIYW5kbGVyIiwiY29uc3RydWN0b3IiLCJhcHAiLCJoYW5kbGVyVHlwZSIsIl9hc3NldHMiLCJhc3NldHMiLCJfd29ya2VyIiwibWF4UmV0cmllcyIsImxvYWQiLCJ1cmwiLCJjYWxsYmFjayIsIm9yaWdpbmFsIiwic2VsZiIsImh0dHAiLCJnZXQiLCJyZXNwb25zZVR5cGUiLCJIdHRwIiwiUmVzcG9uc2VUeXBlIiwiQVJSQVlfQlVGRkVSIiwicmV0cnkiLCJlcnIiLCJyZXNwb25zZSIsIl91bnRhciIsImV4IiwicGxhdGZvcm0iLCJ3b3JrZXJzIiwiVW50YXJXb3JrZXIiLCJwcmVmaXgiLCJ1bnRhciIsImZpbGVzIiwiaGFzUGVuZGluZ1JlcXVlc3RzIiwiZGVzdHJveSIsImFyY2hpdmUiLCJVbnRhciIsIm9wZW4iLCJkYXRhIiwiQnVuZGxlIiwicGF0Y2giLCJhc3NldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFPQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxhQUFhLENBQUM7QUFRaEI7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0lDLFdBQVdBLENBQUNDLEdBQUcsRUFBRTtBQWJqQjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0lBSkksSUFLQUMsQ0FBQUEsV0FBVyxHQUFHLFFBQVEsQ0FBQTtBQVNsQixJQUFBLElBQUksQ0FBQ0MsT0FBTyxHQUFHRixHQUFHLENBQUNHLE1BQU0sQ0FBQTtJQUN6QixJQUFJLENBQUNDLE9BQU8sR0FBRyxJQUFJLENBQUE7SUFDbkIsSUFBSSxDQUFDQyxVQUFVLEdBQUcsQ0FBQyxDQUFBO0FBQ3ZCLEdBQUE7QUFFQUMsRUFBQUEsSUFBSUEsQ0FBQ0MsR0FBRyxF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
