import { path } from '../../core/path.js';
import { http } from '../../platform/net/http.js';
import { Sprite } from '../../scene/sprite.js';

/** @typedef {import('./handler.js').ResourceHandler} ResourceHandler */

// The scope of this function is the sprite asset
function onTextureAtlasLoaded(atlasAsset) {
  const spriteAsset = this;
  if (spriteAsset.resource) {
    spriteAsset.resource.atlas = atlasAsset.resource;
  }
}

// The scope of this function is the sprite asset
function onTextureAtlasAdded(atlasAsset) {
  const spriteAsset = this;
  spriteAsset.registry.load(atlasAsset);
}

/**
 * Resource handler used for loading {@link Sprite} resources.
 *
 * @implements {ResourceHandler}
 */
class SpriteHandler {
  /**
   * Create a new SpriteHandler instance.
   *
   * @param {import('../app-base.js').AppBase} app - The running {@link AppBase}.
   * @hideconstructor
   */
  constructor(app) {
    /**
     * Type of the resource the handler handles.
     *
     * @type {string}
     */
    this.handlerType = "sprite";
    this._assets = app.assets;
    this._device = app.graphicsDevice;
    this.maxRetries = 0;
  }
  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    // if given a json file (probably engine-only use case)
    if (path.getExtension(url.original) === '.json') {
      http.get(url.load, {
        retry: this.maxRetries > 0,
        maxRetries: this.maxRetries
      }, function (err, response) {
        if (!err) {
          callback(null, response);
        } else {
          callback(err);
        }
      });
    }
  }

  // Create sprite resource
  open(url, data) {
    const sprite = new Sprite(this._device);
    if (url) {
      // if url field is present json data is being loaded from file
      // store data on sprite object temporarily
      sprite.__data = data;
    }
    return sprite;
  }

  // Set sprite data
  patch(asset, assets) {
    const sprite = asset.resource;
    if (sprite.__data) {
      // loading from a json file we have asset data store temporarily on the sprite resource
      // copy it into asset.data and delete

      asset.data.pixelsPerUnit = sprite.__data.pixelsPerUnit;
      asset.data.renderMode = sprite.__data.renderMode;
      asset.data.frameKeys = sprite.__data.frameKeys;
      if (sprite.__data.textureAtlasAsset) {
        const atlas = assets.getByUrl(sprite.__data.textureAtlasAsset);
        if (atlas) {
          asset.data.textureAtlasAsset = atlas.id;
        } else {
          console.warn('Could not find textureatlas with url: ' + sprite.__data.textureAtlasAsset);
        }
      }

      // note: we don't remove sprite.__data in case another asset is loaded from the same URL when it is fetched from the cache
      // the __data is not re-assigned and so asset.data is not set up.
    }

    sprite.startUpdate();
    sprite.renderMode = asset.data.renderMode;
    sprite.pixelsPerUnit = asset.data.pixelsPerUnit;
    sprite.frameKeys = asset.data.frameKeys;
    this._updateAtlas(asset);
    sprite.endUpdate();
    asset.off('change', this._onAssetChange, this);
    asset.on('change', this._onAssetChange, this);
  }

  // Load atlas
  _updateAtlas(asset) {
    const sprite = asset.resource;
    if (!asset.data.textureAtlasAsset) {
      sprite.atlas = null;
      return;
    }
    this._assets.off('load:' + asset.data.textureAtlasAsset, onTextureAtlasLoaded, asset);
    this._assets.on('load:' + asset.data.textureAtlasAsset, onTextureAtlasLoaded, asset);
    const atlasAsset = this._assets.get(asset.data.textureAtlasAsset);
    if (atlasAsset && atlasAsset.resource) {
      sprite.atlas = atlasAsset.resource;
    } else {
      if (!atlasAsset) {
        this._assets.off('add:' + asset.data.textureAtlasAsset, onTextureAtlasAdded, asset);
        this._assets.on('add:' + asset.data.textureAtlasAsset, onTextureAtlasAdded, asset);
      } else {
        this._assets.load(atlasAsset);
      }
    }
  }
  _onAssetChange(asset, attribute, value, oldValue) {
    if (attribute === 'data') {
      // if the texture atlas changed, clear events for old atlas asset
      if (value && value.textureAtlasAsset && oldValue && value.textureAtlasAsset !== oldValue.textureAtlasAsset) {
        this._assets.off('load:' + oldValue.textureAtlasAsset, onTextureAtlasLoaded, asset);
        this._assets.off('add:' + oldValue.textureAtlasAsset, onTextureAtlasAdded, asset);
      }
    }
  }
}

export { SpriteHandler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ByaXRlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2hhbmRsZXJzL3Nwcml0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXRoIH0gZnJvbSAnLi4vLi4vY29yZS9wYXRoLmpzJztcblxuaW1wb3J0IHsgaHR0cCB9IGZyb20gJy4uLy4uL3BsYXRmb3JtL25ldC9odHRwLmpzJztcblxuaW1wb3J0IHsgU3ByaXRlIH0gZnJvbSAnLi4vLi4vc2NlbmUvc3ByaXRlLmpzJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vaGFuZGxlci5qcycpLlJlc291cmNlSGFuZGxlcn0gUmVzb3VyY2VIYW5kbGVyICovXG5cbi8vIFRoZSBzY29wZSBvZiB0aGlzIGZ1bmN0aW9uIGlzIHRoZSBzcHJpdGUgYXNzZXRcbmZ1bmN0aW9uIG9uVGV4dHVyZUF0bGFzTG9hZGVkKGF0bGFzQXNzZXQpIHtcbiAgICBjb25zdCBzcHJpdGVBc3NldCA9IHRoaXM7XG4gICAgaWYgKHNwcml0ZUFzc2V0LnJlc291cmNlKSB7XG4gICAgICAgIHNwcml0ZUFzc2V0LnJlc291cmNlLmF0bGFzID0gYXRsYXNBc3NldC5yZXNvdXJjZTtcbiAgICB9XG59XG5cbi8vIFRoZSBzY29wZSBvZiB0aGlzIGZ1bmN0aW9uIGlzIHRoZSBzcHJpdGUgYXNzZXRcbmZ1bmN0aW9uIG9uVGV4dHVyZUF0bGFzQWRkZWQoYXRsYXNBc3NldCkge1xuICAgIGNvbnN0IHNwcml0ZUFzc2V0ID0gdGhpcztcbiAgICBzcHJpdGVBc3NldC5yZWdpc3RyeS5sb2FkKGF0bGFzQXNzZXQpO1xufVxuXG4vKipcbiAqIFJlc291cmNlIGhhbmRsZXIgdXNlZCBmb3IgbG9hZGluZyB7QGxpbmsgU3ByaXRlfSByZXNvdXJjZXMuXG4gKlxuICogQGltcGxlbWVudHMge1Jlc291cmNlSGFuZGxlcn1cbiAqL1xuY2xhc3MgU3ByaXRlSGFuZGxlciB7XG4gICAgLyoqXG4gICAgICogVHlwZSBvZiB0aGUgcmVzb3VyY2UgdGhlIGhhbmRsZXIgaGFuZGxlcy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgaGFuZGxlclR5cGUgPSBcInNwcml0ZVwiO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFNwcml0ZUhhbmRsZXIgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi4vYXBwLWJhc2UuanMnKS5BcHBCYXNlfSBhcHAgLSBUaGUgcnVubmluZyB7QGxpbmsgQXBwQmFzZX0uXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xuICAgICAgICB0aGlzLl9hc3NldHMgPSBhcHAuYXNzZXRzO1xuICAgICAgICB0aGlzLl9kZXZpY2UgPSBhcHAuZ3JhcGhpY3NEZXZpY2U7XG4gICAgICAgIHRoaXMubWF4UmV0cmllcyA9IDA7XG4gICAgfVxuXG4gICAgbG9hZCh1cmwsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdXJsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdXJsID0ge1xuICAgICAgICAgICAgICAgIGxvYWQ6IHVybCxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbDogdXJsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgZ2l2ZW4gYSBqc29uIGZpbGUgKHByb2JhYmx5IGVuZ2luZS1vbmx5IHVzZSBjYXNlKVxuICAgICAgICBpZiAocGF0aC5nZXRFeHRlbnNpb24odXJsLm9yaWdpbmFsKSA9PT0gJy5qc29uJykge1xuICAgICAgICAgICAgaHR0cC5nZXQodXJsLmxvYWQsIHtcbiAgICAgICAgICAgICAgICByZXRyeTogdGhpcy5tYXhSZXRyaWVzID4gMCxcbiAgICAgICAgICAgICAgICBtYXhSZXRyaWVzOiB0aGlzLm1heFJldHJpZXNcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIsIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgc3ByaXRlIHJlc291cmNlXG4gICAgb3Blbih1cmwsIGRhdGEpIHtcbiAgICAgICAgY29uc3Qgc3ByaXRlID0gbmV3IFNwcml0ZSh0aGlzLl9kZXZpY2UpO1xuICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICAvLyBpZiB1cmwgZmllbGQgaXMgcHJlc2VudCBqc29uIGRhdGEgaXMgYmVpbmcgbG9hZGVkIGZyb20gZmlsZVxuICAgICAgICAgICAgLy8gc3RvcmUgZGF0YSBvbiBzcHJpdGUgb2JqZWN0IHRlbXBvcmFyaWx5XG4gICAgICAgICAgICBzcHJpdGUuX19kYXRhID0gZGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzcHJpdGU7XG4gICAgfVxuXG4gICAgLy8gU2V0IHNwcml0ZSBkYXRhXG4gICAgcGF0Y2goYXNzZXQsIGFzc2V0cykge1xuICAgICAgICBjb25zdCBzcHJpdGUgPSBhc3NldC5yZXNvdXJjZTtcbiAgICAgICAgaWYgKHNwcml0ZS5fX2RhdGEpIHtcbiAgICAgICAgICAgIC8vIGxvYWRpbmcgZnJvbSBhIGpzb24gZmlsZSB3ZSBoYXZlIGFzc2V0IGRhdGEgc3RvcmUgdGVtcG9yYXJpbHkgb24gdGhlIHNwcml0ZSByZXNvdXJjZVxuICAgICAgICAgICAgLy8gY29weSBpdCBpbnRvIGFzc2V0LmRhdGEgYW5kIGRlbGV0ZVxuXG4gICAgICAgICAgICBhc3NldC5kYXRhLnBpeGVsc1BlclVuaXQgPSBzcHJpdGUuX19kYXRhLnBpeGVsc1BlclVuaXQ7XG4gICAgICAgICAgICBhc3NldC5kYXRhLnJlbmRlck1vZGUgPSBzcHJpdGUuX19kYXRhLnJlbmRlck1vZGU7XG4gICAgICAgICAgICBhc3NldC5kYXRhLmZyYW1lS2V5cyA9IHNwcml0ZS5fX2RhdGEuZnJhbWVLZXlzO1xuXG4gICAgICAgICAgICBpZiAoc3ByaXRlLl9fZGF0YS50ZXh0dXJlQXRsYXNBc3NldCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0bGFzID0gYXNzZXRzLmdldEJ5VXJsKHNwcml0ZS5fX2RhdGEudGV4dHVyZUF0bGFzQXNzZXQpO1xuICAgICAgICAgICAgICAgIGlmIChhdGxhcykge1xuICAgICAgICAgICAgICAgICAgICBhc3NldC5kYXRhLnRleHR1cmVBdGxhc0Fzc2V0ID0gYXRsYXMuaWQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdDb3VsZCBub3QgZmluZCB0ZXh0dXJlYXRsYXMgd2l0aCB1cmw6ICcgKyBzcHJpdGUuX19kYXRhLnRleHR1cmVBdGxhc0Fzc2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG5vdGU6IHdlIGRvbid0IHJlbW92ZSBzcHJpdGUuX19kYXRhIGluIGNhc2UgYW5vdGhlciBhc3NldCBpcyBsb2FkZWQgZnJvbSB0aGUgc2FtZSBVUkwgd2hlbiBpdCBpcyBmZXRjaGVkIGZyb20gdGhlIGNhY2hlXG4gICAgICAgICAgICAvLyB0aGUgX19kYXRhIGlzIG5vdCByZS1hc3NpZ25lZCBhbmQgc28gYXNzZXQuZGF0YSBpcyBub3Qgc2V0IHVwLlxuICAgICAgICB9XG5cbiAgICAgICAgc3ByaXRlLnN0YXJ0VXBkYXRlKCk7XG4gICAgICAgIHNwcml0ZS5yZW5kZXJNb2RlID0gYXNzZXQuZGF0YS5yZW5kZXJNb2RlO1xuICAgICAgICBzcHJpdGUucGl4ZWxzUGVyVW5pdCA9IGFzc2V0LmRhdGEucGl4ZWxzUGVyVW5pdDtcbiAgICAgICAgc3ByaXRlLmZyYW1lS2V5cyA9IGFzc2V0LmRhdGEuZnJhbWVLZXlzO1xuICAgICAgICB0aGlzLl91cGRhdGVBdGxhcyhhc3NldCk7XG4gICAgICAgIHNwcml0ZS5lbmRVcGRhdGUoKTtcblxuICAgICAgICBhc3NldC5vZmYoJ2NoYW5nZScsIHRoaXMuX29uQXNzZXRDaGFuZ2UsIHRoaXMpO1xuICAgICAgICBhc3NldC5vbignY2hhbmdlJywgdGhpcy5fb25Bc3NldENoYW5nZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgLy8gTG9hZCBhdGxhc1xuICAgIF91cGRhdGVBdGxhcyhhc3NldCkge1xuICAgICAgICBjb25zdCBzcHJpdGUgPSBhc3NldC5yZXNvdXJjZTtcbiAgICAgICAgaWYgKCFhc3NldC5kYXRhLnRleHR1cmVBdGxhc0Fzc2V0KSB7XG4gICAgICAgICAgICBzcHJpdGUuYXRsYXMgPSBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fYXNzZXRzLm9mZignbG9hZDonICsgYXNzZXQuZGF0YS50ZXh0dXJlQXRsYXNBc3NldCwgb25UZXh0dXJlQXRsYXNMb2FkZWQsIGFzc2V0KTtcbiAgICAgICAgdGhpcy5fYXNzZXRzLm9uKCdsb2FkOicgKyBhc3NldC5kYXRhLnRleHR1cmVBdGxhc0Fzc2V0LCBvblRleHR1cmVBdGxhc0xvYWRlZCwgYXNzZXQpO1xuXG4gICAgICAgIGNvbnN0IGF0bGFzQXNzZXQgPSB0aGlzLl9hc3NldHMuZ2V0KGFzc2V0LmRhdGEudGV4dHVyZUF0bGFzQXNzZXQpO1xuICAgICAgICBpZiAoYXRsYXNBc3NldCAmJiBhdGxhc0Fzc2V0LnJlc291cmNlKSB7XG4gICAgICAgICAgICBzcHJpdGUuYXRsYXMgPSBhdGxhc0Fzc2V0LnJlc291cmNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFhdGxhc0Fzc2V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXNzZXRzLm9mZignYWRkOicgKyBhc3NldC5kYXRhLnRleHR1cmVBdGxhc0Fzc2V0LCBvblRleHR1cmVBdGxhc0FkZGVkLCBhc3NldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXNzZXRzLm9uKCdhZGQ6JyArIGFzc2V0LmRhdGEudGV4dHVyZUF0bGFzQXNzZXQsIG9uVGV4dHVyZUF0bGFzQWRkZWQsIGFzc2V0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXNzZXRzLmxvYWQoYXRsYXNBc3NldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25Bc3NldENoYW5nZShhc3NldCwgYXR0cmlidXRlLCB2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZSA9PT0gJ2RhdGEnKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGUgdGV4dHVyZSBhdGxhcyBjaGFuZ2VkLCBjbGVhciBldmVudHMgZm9yIG9sZCBhdGxhcyBhc3NldFxuICAgICAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLnRleHR1cmVBdGxhc0Fzc2V0ICYmIG9sZFZhbHVlICYmIHZhbHVlLnRleHR1cmVBdGxhc0Fzc2V0ICE9PSBvbGRWYWx1ZS50ZXh0dXJlQXRsYXNBc3NldCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Fzc2V0cy5vZmYoJ2xvYWQ6JyArIG9sZFZhbHVlLnRleHR1cmVBdGxhc0Fzc2V0LCBvblRleHR1cmVBdGxhc0xvYWRlZCwgYXNzZXQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Fzc2V0cy5vZmYoJ2FkZDonICsgb2xkVmFsdWUudGV4dHVyZUF0bGFzQXNzZXQsIG9uVGV4dHVyZUF0bGFzQWRkZWQsIGFzc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgU3ByaXRlSGFuZGxlciB9O1xuIl0sIm5hbWVzIjpbIm9uVGV4dHVyZUF0bGFzTG9hZGVkIiwiYXRsYXNBc3NldCIsInNwcml0ZUFzc2V0IiwicmVzb3VyY2UiLCJhdGxhcyIsIm9uVGV4dHVyZUF0bGFzQWRkZWQiLCJyZWdpc3RyeSIsImxvYWQiLCJTcHJpdGVIYW5kbGVyIiwiY29uc3RydWN0b3IiLCJhcHAiLCJoYW5kbGVyVHlwZSIsIl9hc3NldHMiLCJhc3NldHMiLCJfZGV2aWNlIiwiZ3JhcGhpY3NEZXZpY2UiLCJtYXhSZXRyaWVzIiwidXJsIiwiY2FsbGJhY2siLCJvcmlnaW5hbCIsInBhdGgiLCJnZXRFeHRlbnNpb24iLCJodHRwIiwiZ2V0IiwicmV0cnkiLCJlcnIiLCJyZXNwb25zZSIsIm9wZW4iLCJkYXRhIiwic3ByaXRlIiwiU3ByaXRlIiwiX19kYXRhIiwicGF0Y2giLCJhc3NldCIsInBpeGVsc1BlclVuaXQiLCJyZW5kZXJNb2RlIiwiZnJhbWVLZXlzIiwidGV4dHVyZUF0bGFzQXNzZXQiLCJnZXRCeVVybCIsImlkIiwiY29uc29sZSIsIndhcm4iLCJzdGFydFVwZGF0ZSIsIl91cGRhdGVBdGxhcyIsImVuZFVwZGF0ZSIsIm9mZiIsIl9vbkFzc2V0Q2hhbmdlIiwib24iLCJhdHRyaWJ1dGUiLCJ2YWx1ZSIsIm9sZFZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7O0FBTUE7O0FBRUE7QUFDQSxTQUFTQSxvQkFBb0JBLENBQUNDLFVBQVUsRUFBRTtFQUN0QyxNQUFNQyxXQUFXLEdBQUcsSUFBSSxDQUFBO0VBQ3hCLElBQUlBLFdBQVcsQ0FBQ0MsUUFBUSxFQUFFO0FBQ3RCRCxJQUFBQSxXQUFXLENBQUNDLFFBQVEsQ0FBQ0MsS0FBSyxHQUFHSCxVQUFVLENBQUNFLFFBQVEsQ0FBQTtBQUNwRCxHQUFBO0FBQ0osQ0FBQTs7QUFFQTtBQUNBLFNBQVNFLG1CQUFtQkEsQ0FBQ0osVUFBVSxFQUFFO0VBQ3JDLE1BQU1DLFdBQVcsR0FBRyxJQUFJLENBQUE7QUFDeEJBLEVBQUFBLFdBQVcsQ0FBQ0ksUUFBUSxDQUFDQyxJQUFJLENBQUNOLFVBQVUsQ0FBQyxDQUFBO0FBQ3pDLENBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1PLGFBQWEsQ0FBQztBQVFoQjtBQUNKO0FBQ0E7QUFDQTtBQUNB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
