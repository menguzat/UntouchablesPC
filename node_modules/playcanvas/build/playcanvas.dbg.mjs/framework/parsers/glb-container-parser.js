import { path } from '../../core/path.js';
import { Asset } from '../asset/asset.js';
import { GlbParser } from './glb-parser.js';
import { GlbContainerResource } from './glb-container-resource.js';

class GlbContainerParser {
  constructor(device, assets, maxRetries) {
    this._device = device;
    this._assets = assets;
    this._defaultMaterial = GlbParser.createDefaultMaterial();
    this.maxRetries = maxRetries;
  }
  _getUrlWithoutParams(url) {
    return url.indexOf('?') >= 0 ? url.split('?')[0] : url;
  }
  load(url, callback, asset) {
    Asset.fetchArrayBuffer(url.load, (err, result) => {
      if (err) {
        callback(err);
      } else {
        GlbParser.parse(this._getUrlWithoutParams(url.original), path.extractPath(url.load), result, this._device, asset.registry, asset.options, (err, result) => {
          if (err) {
            callback(err);
          } else {
            // return everything
            callback(null, new GlbContainerResource(result, asset, this._assets, this._defaultMaterial));
          }
        });
      }
    }, asset, this.maxRetries);
  }
  open(url, data, asset) {
    return data;
  }
  patch(asset, assets) {}
}

export { GlbContainerParser };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xiLWNvbnRhaW5lci1wYXJzZXIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9mcmFtZXdvcmsvcGFyc2Vycy9nbGItY29udGFpbmVyLXBhcnNlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXRoIH0gZnJvbSAnLi4vLi4vY29yZS9wYXRoLmpzJztcbmltcG9ydCB7IEFzc2V0IH0gZnJvbSAnLi4vLi4vZnJhbWV3b3JrL2Fzc2V0L2Fzc2V0LmpzJztcbmltcG9ydCB7IEdsYlBhcnNlciB9IGZyb20gXCIuL2dsYi1wYXJzZXIuanNcIjtcbmltcG9ydCB7IEdsYkNvbnRhaW5lclJlc291cmNlIH0gZnJvbSAnLi9nbGItY29udGFpbmVyLXJlc291cmNlLmpzJztcblxuY2xhc3MgR2xiQ29udGFpbmVyUGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcihkZXZpY2UsIGFzc2V0cywgbWF4UmV0cmllcykge1xuICAgICAgICB0aGlzLl9kZXZpY2UgPSBkZXZpY2U7XG4gICAgICAgIHRoaXMuX2Fzc2V0cyA9IGFzc2V0cztcbiAgICAgICAgdGhpcy5fZGVmYXVsdE1hdGVyaWFsID0gR2xiUGFyc2VyLmNyZWF0ZURlZmF1bHRNYXRlcmlhbCgpO1xuICAgICAgICB0aGlzLm1heFJldHJpZXMgPSBtYXhSZXRyaWVzO1xuICAgIH1cblxuICAgIF9nZXRVcmxXaXRob3V0UGFyYW1zKHVybCkge1xuICAgICAgICByZXR1cm4gdXJsLmluZGV4T2YoJz8nKSA+PSAwID8gdXJsLnNwbGl0KCc/JylbMF0gOiB1cmw7XG4gICAgfVxuXG4gICAgbG9hZCh1cmwsIGNhbGxiYWNrLCBhc3NldCkge1xuICAgICAgICBBc3NldC5mZXRjaEFycmF5QnVmZmVyKHVybC5sb2FkLCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBHbGJQYXJzZXIucGFyc2UoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dldFVybFdpdGhvdXRQYXJhbXModXJsLm9yaWdpbmFsKSxcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5leHRyYWN0UGF0aCh1cmwubG9hZCksXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGV2aWNlLFxuICAgICAgICAgICAgICAgICAgICBhc3NldC5yZWdpc3RyeSxcbiAgICAgICAgICAgICAgICAgICAgYXNzZXQub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIGV2ZXJ5dGhpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBuZXcgR2xiQ29udGFpbmVyUmVzb3VyY2UocmVzdWx0LCBhc3NldCwgdGhpcy5fYXNzZXRzLCB0aGlzLl9kZWZhdWx0TWF0ZXJpYWwpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGFzc2V0LCB0aGlzLm1heFJldHJpZXMpO1xuICAgIH1cblxuICAgIG9wZW4odXJsLCBkYXRhLCBhc3NldCkge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBwYXRjaChhc3NldCwgYXNzZXRzKSB7XG5cbiAgICB9XG59XG5cbmV4cG9ydCB7XG4gICAgR2xiQ29udGFpbmVyUGFyc2VyXG59O1xuIl0sIm5hbWVzIjpbIkdsYkNvbnRhaW5lclBhcnNlciIsImNvbnN0cnVjdG9yIiwiZGV2aWNlIiwiYXNzZXRzIiwibWF4UmV0cmllcyIsIl9kZXZpY2UiLCJfYXNzZXRzIiwiX2RlZmF1bHRNYXRlcmlhbCIsIkdsYlBhcnNlciIsImNyZWF0ZURlZmF1bHRNYXRlcmlhbCIsIl9nZXRVcmxXaXRob3V0UGFyYW1zIiwidXJsIiwiaW5kZXhPZiIsInNwbGl0IiwibG9hZCIsImNhbGxiYWNrIiwiYXNzZXQiLCJBc3NldCIsImZldGNoQXJyYXlCdWZmZXIiLCJlcnIiLCJyZXN1bHQiLCJwYXJzZSIsIm9yaWdpbmFsIiwicGF0aCIsImV4dHJhY3RQYXRoIiwicmVnaXN0cnkiLCJvcHRpb25zIiwiR2xiQ29udGFpbmVyUmVzb3VyY2UiLCJvcGVuIiwiZGF0YSIsInBhdGNoIl0sIm1hcHBpbmdzIjoiOzs7OztBQUtBLE1BQU1BLGtCQUFrQixDQUFDO0FBQ3JCQyxFQUFBQSxXQUFXQSxDQUFDQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsVUFBVSxFQUFFO0lBQ3BDLElBQUksQ0FBQ0MsT0FBTyxHQUFHSCxNQUFNLENBQUE7SUFDckIsSUFBSSxDQUFDSSxPQUFPLEdBQUdILE1BQU0sQ0FBQTtBQUNyQixJQUFBLElBQUksQ0FBQ0ksZ0JBQWdCLEdBQUdDLFNBQVMsQ0FBQ0MscUJBQXFCLEVBQUUsQ0FBQTtJQUN6RCxJQUFJLENBQUNMLFVBQVUsR0FBR0EsVUFBVSxDQUFBO0FBQ2hDLEdBQUE7RUFFQU0sb0JBQW9CQSxDQUFDQyxHQUFHLEVBQUU7QUFDdEIsSUFBQSxPQUFPQSxHQUFHLENBQUNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUdELEdBQUcsQ0FBQ0UsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHRixHQUFHLENBQUE7QUFDMUQsR0FBQTtBQUVBRyxFQUFBQSxJQUFJQSxDQUFDSCxHQUFHLEVBQUVJLFFBQVEsRUFBRUMsS0FBSyxFQUFFO0lBQ3ZCQyxLQUFLLENBQUNDLGdCQUFnQixDQUFDUCxHQUFHLENBQUNHLElBQUksRUFBRSxDQUFDSyxHQUFHLEVBQUVDLE1BQU0sS0FBSztBQUM5QyxNQUFBLElBQUlELEdBQUcsRUFBRTtRQUNMSixRQUFRLENBQUNJLEdBQUcsQ0FBQyxDQUFBO0FBQ2pCLE9BQUMsTUFBTTtBQUNIWCxRQUFBQSxTQUFTLENBQUNhLEtBQUssQ0FDWCxJQUFJLENBQUNYLG9CQUFvQixDQUFDQyxHQUFHLENBQUNXLFFBQVEsQ0FBQyxFQUN2Q0MsSUFBSSxDQUFDQyxXQUFXLENBQUNiLEdBQUcsQ0FBQ0csSUFBSSxDQUFDLEVBQzFCTSxNQUFNLEVBQ04sSUFBSSxDQUFDZixPQUFPLEVBQ1pXLEtBQUssQ0FBQ1MsUUFBUSxFQUNkVCxLQUFLLENBQUNVLE9BQU8sRUFDYixDQUFDUCxHQUFHLEVBQUVDLE1BQU0sS0FBSztBQUNiLFVBQUEsSUFBSUQsR0FBRyxFQUFFO1lBQ0xKLFFBQVEsQ0FBQ0ksR0FBRyxDQUFDLENBQUE7QUFDakIsV0FBQyxNQUFNO0FBQ0g7QUFDQUosWUFBQUEsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJWSxvQkFBb0IsQ0FBQ1AsTUFBTSxFQUFFSixLQUFLLEVBQUUsSUFBSSxDQUFDVixPQUFPLEVBQUUsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUE7QUFDaEcsV0FBQTtBQUNKLFNBQUMsQ0FBQyxDQUFBO0FBQ1YsT0FBQTtBQUNKLEtBQUMsRUFBRVMsS0FBSyxFQUFFLElBQUksQ0FBQ1osVUFBVSxDQUFDLENBQUE7QUFDOUIsR0FBQTtBQUVBd0IsRUFBQUEsSUFBSUEsQ0FBQ2pCLEdBQUcsRUFBRWtCLElBQUksRUFBRWIsS0FBSyxFQUFFO0FBQ25CLElBQUEsT0FBT2EsSUFBSSxDQUFBO0FBQ2YsR0FBQTtBQUVBQyxFQUFBQSxLQUFLQSxDQUFDZCxLQUFLLEVBQUViLE1BQU0sRUFBRSxFQUVyQjtBQUNKOzs7OyJ9
