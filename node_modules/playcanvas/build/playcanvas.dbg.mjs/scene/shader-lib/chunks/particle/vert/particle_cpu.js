var particle_cpuVS = /* glsl */`
attribute vec4 particle_vertexData;   // XYZ = world pos, W = life
attribute vec4 particle_vertexData2;  // X = angle, Y = scale, Z = alpha, W = velocity.x
attribute vec4 particle_vertexData3;  // XYZ = particle local pos, W = velocity.y
attribute float particle_vertexData4; // particle id

// type depends on useMesh property. Start with X = velocity.z, Y = particle ID and for mesh particles proceeds with Z = mesh UV.x, W = mesh UV.y
#ifndef USE_MESH
attribute vec2 particle_vertexData5;
#else
attribute vec4 particle_vertexData5;
#endif

uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;

#ifndef VIEWMATRIX
#define VIEWMATRIX
uniform mat4 matrix_view;
#endif

uniform mat3 matrix_normal;
uniform mat4 matrix_viewInverse;

uniform float numParticles;
uniform float lifetime;
uniform float stretch;
uniform float seed;
uniform vec3 wrapBounds;
uniform vec3 emitterScale;
uniform vec3 faceTangent;
uniform vec3 faceBinorm;
uniform highp sampler2D internalTex0;
uniform highp sampler2D internalTex1;
uniform highp sampler2D internalTex2;
uniform vec3 emitterPos;

varying vec4 texCoordsAlphaLife;

vec2 rotate(vec2 quadXY, float pRotation, out mat2 rotMatrix)
{
    float c = cos(pRotation);
    float s = sin(pRotation);
    //vec4 rotationMatrix = vec4(c, -s, s, c);

    mat2 m = mat2(c, -s, s, c);
    rotMatrix = m;

    return m * quadXY;
}

vec3 billboard(vec3 InstanceCoords, vec2 quadXY)
{
    vec3 pos = -matrix_viewInverse[0].xyz * quadXY.x + -matrix_viewInverse[1].xyz * quadXY.y;
    return pos;
}

vec3 customFace(vec3 InstanceCoords, vec2 quadXY)
{
    vec3 pos = faceTangent * quadXY.x + faceBinorm * quadXY.y;
    return pos;
}

void main(void)
{
    vec3 particlePos = particle_vertexData.xyz;
    vec3 inPos = particlePos;
    vec3 vertPos = particle_vertexData3.xyz;
    vec3 inVel = vec3(particle_vertexData2.w, particle_vertexData3.w, particle_vertexData5.x);

    float id = floor(particle_vertexData4);
    float rndFactor = fract(sin(id + 1.0 + seed));
    vec3 rndFactor3 = vec3(rndFactor, fract(rndFactor*10.0), fract(rndFactor*100.0));

#ifdef LOCAL_SPACE
    inVel = mat3(matrix_model) * inVel;
#endif
    vec2 velocityV = normalize((mat3(matrix_view) * inVel).xy); // should be removed by compiler if align/stretch is not used

    vec2 quadXY = vertPos.xy;

#ifdef USE_MESH
    texCoordsAlphaLife = vec4(particle_vertexData5.zw, particle_vertexData2.z, particle_vertexData.w);
#else
    texCoordsAlphaLife = vec4(quadXY * -0.5 + 0.5, particle_vertexData2.z, particle_vertexData.w);
#endif
    mat2 rotMatrix;

    float inAngle = particle_vertexData2.x;
    vec3 particlePosMoved = vec3(0.0);
    vec3 meshLocalPos = particle_vertexData3.xyz;
`;

export { particle_cpuVS as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGljbGVfY3B1LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9zcmMvc2NlbmUvc2hhZGVyLWxpYi9jaHVua3MvcGFydGljbGUvdmVydC9wYXJ0aWNsZV9jcHUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgLyogZ2xzbCAqL2BcbmF0dHJpYnV0ZSB2ZWM0IHBhcnRpY2xlX3ZlcnRleERhdGE7ICAgLy8gWFlaID0gd29ybGQgcG9zLCBXID0gbGlmZVxuYXR0cmlidXRlIHZlYzQgcGFydGljbGVfdmVydGV4RGF0YTI7ICAvLyBYID0gYW5nbGUsIFkgPSBzY2FsZSwgWiA9IGFscGhhLCBXID0gdmVsb2NpdHkueFxuYXR0cmlidXRlIHZlYzQgcGFydGljbGVfdmVydGV4RGF0YTM7ICAvLyBYWVogPSBwYXJ0aWNsZSBsb2NhbCBwb3MsIFcgPSB2ZWxvY2l0eS55XG5hdHRyaWJ1dGUgZmxvYXQgcGFydGljbGVfdmVydGV4RGF0YTQ7IC8vIHBhcnRpY2xlIGlkXG5cbi8vIHR5cGUgZGVwZW5kcyBvbiB1c2VNZXNoIHByb3BlcnR5LiBTdGFydCB3aXRoIFggPSB2ZWxvY2l0eS56LCBZID0gcGFydGljbGUgSUQgYW5kIGZvciBtZXNoIHBhcnRpY2xlcyBwcm9jZWVkcyB3aXRoIFogPSBtZXNoIFVWLngsIFcgPSBtZXNoIFVWLnlcbiNpZm5kZWYgVVNFX01FU0hcbmF0dHJpYnV0ZSB2ZWMyIHBhcnRpY2xlX3ZlcnRleERhdGE1O1xuI2Vsc2VcbmF0dHJpYnV0ZSB2ZWM0IHBhcnRpY2xlX3ZlcnRleERhdGE1O1xuI2VuZGlmXG5cbnVuaWZvcm0gbWF0NCBtYXRyaXhfdmlld1Byb2plY3Rpb247XG51bmlmb3JtIG1hdDQgbWF0cml4X21vZGVsO1xuXG4jaWZuZGVmIFZJRVdNQVRSSVhcbiNkZWZpbmUgVklFV01BVFJJWFxudW5pZm9ybSBtYXQ0IG1hdHJpeF92aWV3O1xuI2VuZGlmXG5cbnVuaWZvcm0gbWF0MyBtYXRyaXhfbm9ybWFsO1xudW5pZm9ybSBtYXQ0IG1hdHJpeF92aWV3SW52ZXJzZTtcblxudW5pZm9ybSBmbG9hdCBudW1QYXJ0aWNsZXM7XG51bmlmb3JtIGZsb2F0IGxpZmV0aW1lO1xudW5pZm9ybSBmbG9hdCBzdHJldGNoO1xudW5pZm9ybSBmbG9hdCBzZWVkO1xudW5pZm9ybSB2ZWMzIHdyYXBCb3VuZHM7XG51bmlmb3JtIHZlYzMgZW1pdHRlclNjYWxlO1xudW5pZm9ybSB2ZWMzIGZhY2VUYW5nZW50O1xudW5pZm9ybSB2ZWMzIGZhY2VCaW5vcm07XG51bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBpbnRlcm5hbFRleDA7XG51bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBpbnRlcm5hbFRleDE7XG51bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCBpbnRlcm5hbFRleDI7XG51bmlmb3JtIHZlYzMgZW1pdHRlclBvcztcblxudmFyeWluZyB2ZWM0IHRleENvb3Jkc0FscGhhTGlmZTtcblxudmVjMiByb3RhdGUodmVjMiBxdWFkWFksIGZsb2F0IHBSb3RhdGlvbiwgb3V0IG1hdDIgcm90TWF0cml4KVxue1xuICAgIGZsb2F0IGMgPSBjb3MocFJvdGF0aW9uKTtcbiAgICBmbG9hdCBzID0gc2luKHBSb3RhdGlvbik7XG4gICAgLy92ZWM0IHJvdGF0aW9uTWF0cml4ID0gdmVjNChjLCAtcywgcywgYyk7XG5cbiAgICBtYXQyIG0gPSBtYXQyKGMsIC1zLCBzLCBjKTtcbiAgICByb3RNYXRyaXggPSBtO1xuXG4gICAgcmV0dXJuIG0gKiBxdWFkWFk7XG59XG5cbnZlYzMgYmlsbGJvYXJkKHZlYzMgSW5zdGFuY2VDb29yZHMsIHZlYzIgcXVhZFhZKVxue1xuICAgIHZlYzMgcG9zID0gLW1hdHJpeF92aWV3SW52ZXJzZVswXS54eXogKiBxdWFkWFkueCArIC1tYXRyaXhfdmlld0ludmVyc2VbMV0ueHl6ICogcXVhZFhZLnk7XG4gICAgcmV0dXJuIHBvcztcbn1cblxudmVjMyBjdXN0b21GYWNlKHZlYzMgSW5zdGFuY2VDb29yZHMsIHZlYzIgcXVhZFhZKVxue1xuICAgIHZlYzMgcG9zID0gZmFjZVRhbmdlbnQgKiBxdWFkWFkueCArIGZhY2VCaW5vcm0gKiBxdWFkWFkueTtcbiAgICByZXR1cm4gcG9zO1xufVxuXG52b2lkIG1haW4odm9pZClcbntcbiAgICB2ZWMzIHBhcnRpY2xlUG9zID0gcGFydGljbGVfdmVydGV4RGF0YS54eXo7XG4gICAgdmVjMyBpblBvcyA9IHBhcnRpY2xlUG9zO1xuICAgIHZlYzMgdmVydFBvcyA9IHBhcnRpY2xlX3ZlcnRleERhdGEzLnh5ejtcbiAgICB2ZWMzIGluVmVsID0gdmVjMyhwYXJ0aWNsZV92ZXJ0ZXhEYXRhMi53LCBwYXJ0aWNsZV92ZXJ0ZXhEYXRhMy53LCBwYXJ0aWNsZV92ZXJ0ZXhEYXRhNS54KTtcblxuICAgIGZsb2F0IGlkID0gZmxvb3IocGFydGljbGVfdmVydGV4RGF0YTQpO1xuICAgIGZsb2F0IHJuZEZhY3RvciA9IGZyYWN0KHNpbihpZCArIDEuMCArIHNlZWQpKTtcbiAgICB2ZWMzIHJuZEZhY3RvcjMgPSB2ZWMzKHJuZEZhY3RvciwgZnJhY3Qocm5kRmFjdG9yKjEwLjApLCBmcmFjdChybmRGYWN0b3IqMTAwLjApKTtcblxuI2lmZGVmIExPQ0FMX1NQQUNFXG4gICAgaW5WZWwgPSBtYXQzKG1hdHJpeF9tb2RlbCkgKiBpblZlbDtcbiNlbmRpZlxuICAgIHZlYzIgdmVsb2NpdHlWID0gbm9ybWFsaXplKChtYXQzKG1hdHJpeF92aWV3KSAqIGluVmVsKS54eSk7IC8vIHNob3VsZCBiZSByZW1vdmVkIGJ5IGNvbXBpbGVyIGlmIGFsaWduL3N0cmV0Y2ggaXMgbm90IHVzZWRcblxuICAgIHZlYzIgcXVhZFhZID0gdmVydFBvcy54eTtcblxuI2lmZGVmIFVTRV9NRVNIXG4gICAgdGV4Q29vcmRzQWxwaGFMaWZlID0gdmVjNChwYXJ0aWNsZV92ZXJ0ZXhEYXRhNS56dywgcGFydGljbGVfdmVydGV4RGF0YTIueiwgcGFydGljbGVfdmVydGV4RGF0YS53KTtcbiNlbHNlXG4gICAgdGV4Q29vcmRzQWxwaGFMaWZlID0gdmVjNChxdWFkWFkgKiAtMC41ICsgMC41LCBwYXJ0aWNsZV92ZXJ0ZXhEYXRhMi56LCBwYXJ0aWNsZV92ZXJ0ZXhEYXRhLncpO1xuI2VuZGlmXG4gICAgbWF0MiByb3RNYXRyaXg7XG5cbiAgICBmbG9hdCBpbkFuZ2xlID0gcGFydGljbGVfdmVydGV4RGF0YTIueDtcbiAgICB2ZWMzIHBhcnRpY2xlUG9zTW92ZWQgPSB2ZWMzKDAuMCk7XG4gICAgdmVjMyBtZXNoTG9jYWxQb3MgPSBwYXJ0aWNsZV92ZXJ0ZXhEYXRhMy54eXo7XG5gO1xuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFlLFVBQVcsQ0FBQTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OyJ9
