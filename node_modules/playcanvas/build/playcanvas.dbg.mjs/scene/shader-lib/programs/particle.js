import { ShaderUtils } from '../../../platform/graphics/shader-utils.js';
import { BLEND_NORMAL, BLEND_ADDITIVE, BLEND_MULTIPLICATIVE } from '../../constants.js';
import { shaderChunks } from '../chunks/chunks.js';
import { gammaCode, tonemapCode } from './common.js';

const particle = {
  generateKey: function (options) {
    let key = "particle";
    for (const prop in options) {
      if (options.hasOwnProperty(prop)) {
        key += options[prop];
      }
    }
    return key;
  },
  _animTex: function (options) {
    let vshader = "";
    vshader += options.animTexLoop ? shaderChunks.particleAnimFrameLoopVS : shaderChunks.particleAnimFrameClampVS;
    vshader += shaderChunks.particleAnimTexVS;
    return vshader;
  },
  createShaderDefinition: function (device, options) {
    const executionDefine = `#define PARTICLE_${options.useCpu ? 'CPU' : 'GPU'}\n`;
    let fshader = '#define PARTICLE\n' + executionDefine;
    let vshader = "#define VERTEXSHADER\n" + executionDefine;
    if (options.mesh) vshader += "#define USE_MESH\n";
    if (options.localSpace) vshader += "#define LOCAL_SPACE\n";
    if (options.screenSpace) vshader += "#define SCREEN_SPACE\n";
    if (options.animTex) vshader += "\nuniform vec2 animTexTilesParams;\n";
    if (options.animTex) vshader += "\nuniform vec4 animTexParams;\n";
    if (options.animTex) vshader += "\nuniform vec2 animTexIndexParams;\n";
    if (options.normal === 2) vshader += "\nvarying mat3 ParticleMat;\n";
    if (options.normal === 1) vshader += "\nvarying vec3 Normal;\n";
    if (options.soft) vshader += "\nvarying float vDepth;\n";
    const faceVS = options.customFace ? shaderChunks.particle_customFaceVS : shaderChunks.particle_billboardVS;
    if (!options.useCpu) {
      vshader += shaderChunks.particle_initVS;
      vshader += options.pack8 ? shaderChunks.particleInputRgba8PS : shaderChunks.particleInputFloatPS;
      if (options.soft > 0) vshader += shaderChunks.screenDepthPS;
      vshader += shaderChunks.particleVS;
      if (options.localSpace) vshader += shaderChunks.particle_localShiftVS;
      if (options.animTex) vshader += this._animTex(options);
      if (options.wrap) vshader += shaderChunks.particle_wrapVS;
      if (options.alignToMotion) vshader += shaderChunks.particle_pointAlongVS;
      vshader += options.mesh ? shaderChunks.particle_meshVS : faceVS;
      if (options.normal === 1) vshader += shaderChunks.particle_normalVS;
      if (options.normal === 2) vshader += shaderChunks.particle_TBNVS;
      if (options.stretch > 0.0) vshader += shaderChunks.particle_stretchVS;
      vshader += shaderChunks.particle_endVS;
      if (options.soft > 0) vshader += shaderChunks.particle_softVS;
    } else {
      if (options.soft > 0) vshader += shaderChunks.screenDepthPS;
      vshader += shaderChunks.particle_cpuVS;
      if (options.localSpace) vshader += shaderChunks.particle_localShiftVS;
      if (options.animTex) vshader += this._animTex(options);
      // if (options.wrap) vshader += shaderChunks.particle_wrapVS;
      if (options.alignToMotion) vshader += shaderChunks.particle_pointAlongVS;
      vshader += options.mesh ? shaderChunks.particle_meshVS : faceVS;
      if (options.normal === 1) vshader += shaderChunks.particle_normalVS;
      if (options.normal === 2) vshader += shaderChunks.particle_TBNVS;
      if (options.stretch > 0.0) vshader += shaderChunks.particle_stretchVS;
      vshader += shaderChunks.particle_cpu_endVS;
      if (options.soft > 0) vshader += shaderChunks.particle_softVS;
    }
    vshader += "}\n";
    if (options.normal > 0) {
      if (options.normal === 1) {
        fshader += "\nvarying vec3 Normal;\n";
      } else if (options.normal === 2) {
        fshader += "\nvarying mat3 ParticleMat;\n";
      }
      fshader += "\nuniform vec3 lightCube[6];\n";
    }
    if (options.soft) fshader += "\nvarying float vDepth;\n";
    if (options.normal === 0 && options.fog === "none") options.srgb = false; // don't have to perform all gamma conversions when no lighting and fogging is used
    fshader += shaderChunks.decodePS;
    fshader += gammaCode(options.gamma);
    fshader += tonemapCode(options.toneMap);
    if (options.fog === 'linear') {
      fshader += shaderChunks.fogLinearPS;
    } else if (options.fog === 'exp') {
      fshader += shaderChunks.fogExpPS;
    } else if (options.fog === 'exp2') {
      fshader += shaderChunks.fogExp2PS;
    } else {
      fshader += shaderChunks.fogNonePS;
    }
    if (options.normal === 2) fshader += "\nuniform sampler2D normalMap;\n";
    if (options.soft > 0) fshader += shaderChunks.screenDepthPS;
    fshader += shaderChunks.particlePS;
    if (options.soft > 0) fshader += shaderChunks.particle_softPS;
    if (options.normal === 1) fshader += "\nvec3 normal = Normal;\n";
    if (options.normal === 2) fshader += shaderChunks.particle_normalMapPS;
    if (options.normal > 0) fshader += options.halflambert ? shaderChunks.particle_halflambertPS : shaderChunks.particle_lambertPS;
    if (options.normal > 0) fshader += shaderChunks.particle_lightingPS;
    if (options.blend === BLEND_NORMAL) {
      fshader += shaderChunks.particle_blendNormalPS;
    } else if (options.blend === BLEND_ADDITIVE) {
      fshader += shaderChunks.particle_blendAddPS;
    } else if (options.blend === BLEND_MULTIPLICATIVE) {
      fshader += shaderChunks.particle_blendMultiplyPS;
    }
    fshader += shaderChunks.particle_endPS;
    return ShaderUtils.createDefinition(device, {
      name: 'ParticleShader',
      vertexCode: vshader,
      fragmentCode: fshader
    });
  }
};

export { particle };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGljbGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zY2VuZS9zaGFkZXItbGliL3Byb2dyYW1zL3BhcnRpY2xlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNoYWRlclV0aWxzIH0gZnJvbSAnLi4vLi4vLi4vcGxhdGZvcm0vZ3JhcGhpY3Mvc2hhZGVyLXV0aWxzLmpzJztcbmltcG9ydCB7IEJMRU5EX0FERElUSVZFLCBCTEVORF9NVUxUSVBMSUNBVElWRSwgQkxFTkRfTk9STUFMIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IHNoYWRlckNodW5rcyB9IGZyb20gJy4uL2NodW5rcy9jaHVua3MuanMnO1xuXG5pbXBvcnQgeyBnYW1tYUNvZGUsIHRvbmVtYXBDb2RlIH0gZnJvbSAnLi9jb21tb24uanMnO1xuXG5jb25zdCBwYXJ0aWNsZSA9IHtcbiAgICBnZW5lcmF0ZUtleTogZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IGtleSA9IFwicGFydGljbGVcIjtcbiAgICAgICAgZm9yIChjb25zdCBwcm9wIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAga2V5ICs9IG9wdGlvbnNbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9LFxuXG4gICAgX2FuaW1UZXg6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIGxldCB2c2hhZGVyID0gXCJcIjtcbiAgICAgICAgdnNoYWRlciArPSBvcHRpb25zLmFuaW1UZXhMb29wID8gc2hhZGVyQ2h1bmtzLnBhcnRpY2xlQW5pbUZyYW1lTG9vcFZTIDogc2hhZGVyQ2h1bmtzLnBhcnRpY2xlQW5pbUZyYW1lQ2xhbXBWUztcbiAgICAgICAgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVBbmltVGV4VlM7XG4gICAgICAgIHJldHVybiB2c2hhZGVyO1xuICAgIH0sXG5cbiAgICBjcmVhdGVTaGFkZXJEZWZpbml0aW9uOiBmdW5jdGlvbiAoZGV2aWNlLCBvcHRpb25zKSB7XG5cbiAgICAgICAgY29uc3QgZXhlY3V0aW9uRGVmaW5lID0gYCNkZWZpbmUgUEFSVElDTEVfJHtvcHRpb25zLnVzZUNwdSA/ICdDUFUnIDogJ0dQVSd9XFxuYDtcblxuICAgICAgICBsZXQgZnNoYWRlciA9ICcjZGVmaW5lIFBBUlRJQ0xFXFxuJyArIGV4ZWN1dGlvbkRlZmluZTtcbiAgICAgICAgbGV0IHZzaGFkZXIgPSBcIiNkZWZpbmUgVkVSVEVYU0hBREVSXFxuXCIgKyBleGVjdXRpb25EZWZpbmU7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWVzaCkgdnNoYWRlciArPSBcIiNkZWZpbmUgVVNFX01FU0hcXG5cIjtcbiAgICAgICAgaWYgKG9wdGlvbnMubG9jYWxTcGFjZSkgdnNoYWRlciArPSBcIiNkZWZpbmUgTE9DQUxfU1BBQ0VcXG5cIjtcbiAgICAgICAgaWYgKG9wdGlvbnMuc2NyZWVuU3BhY2UpIHZzaGFkZXIgKz0gXCIjZGVmaW5lIFNDUkVFTl9TUEFDRVxcblwiO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmFuaW1UZXgpIHZzaGFkZXIgKz0gXCJcXG51bmlmb3JtIHZlYzIgYW5pbVRleFRpbGVzUGFyYW1zO1xcblwiO1xuICAgICAgICBpZiAob3B0aW9ucy5hbmltVGV4KSB2c2hhZGVyICs9IFwiXFxudW5pZm9ybSB2ZWM0IGFuaW1UZXhQYXJhbXM7XFxuXCI7XG4gICAgICAgIGlmIChvcHRpb25zLmFuaW1UZXgpIHZzaGFkZXIgKz0gXCJcXG51bmlmb3JtIHZlYzIgYW5pbVRleEluZGV4UGFyYW1zO1xcblwiO1xuICAgICAgICBpZiAob3B0aW9ucy5ub3JtYWwgPT09IDIpIHZzaGFkZXIgKz0gXCJcXG52YXJ5aW5nIG1hdDMgUGFydGljbGVNYXQ7XFxuXCI7XG4gICAgICAgIGlmIChvcHRpb25zLm5vcm1hbCA9PT0gMSkgdnNoYWRlciArPSBcIlxcbnZhcnlpbmcgdmVjMyBOb3JtYWw7XFxuXCI7XG4gICAgICAgIGlmIChvcHRpb25zLnNvZnQpIHZzaGFkZXIgKz0gXCJcXG52YXJ5aW5nIGZsb2F0IHZEZXB0aDtcXG5cIjtcblxuICAgICAgICBjb25zdCBmYWNlVlMgPSBvcHRpb25zLmN1c3RvbUZhY2UgPyBzaGFkZXJDaHVua3MucGFydGljbGVfY3VzdG9tRmFjZVZTIDogc2hhZGVyQ2h1bmtzLnBhcnRpY2xlX2JpbGxib2FyZFZTO1xuXG4gICAgICAgIGlmICghb3B0aW9ucy51c2VDcHUpIHtcbiAgICAgICAgICAgIHZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnBhcnRpY2xlX2luaXRWUztcbiAgICAgICAgICAgIHZzaGFkZXIgKz0gKG9wdGlvbnMucGFjazggPyBzaGFkZXJDaHVua3MucGFydGljbGVJbnB1dFJnYmE4UFMgOiBzaGFkZXJDaHVua3MucGFydGljbGVJbnB1dEZsb2F0UFMpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc29mdCA+IDApIHZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnNjcmVlbkRlcHRoUFM7XG4gICAgICAgICAgICB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZVZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubG9jYWxTcGFjZSkgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfbG9jYWxTaGlmdFZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbVRleCkgdnNoYWRlciArPSB0aGlzLl9hbmltVGV4KG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMud3JhcCkgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfd3JhcFZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWxpZ25Ub01vdGlvbikgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfcG9pbnRBbG9uZ1ZTO1xuICAgICAgICAgICAgdnNoYWRlciArPSBvcHRpb25zLm1lc2ggPyBzaGFkZXJDaHVua3MucGFydGljbGVfbWVzaFZTIDogZmFjZVZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubm9ybWFsID09PSAxKSB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9ub3JtYWxWUztcbiAgICAgICAgICAgIGlmIChvcHRpb25zLm5vcm1hbCA9PT0gMikgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfVEJOVlM7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zdHJldGNoID4gMC4wKSB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9zdHJldGNoVlM7XG4gICAgICAgICAgICB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9lbmRWUztcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNvZnQgPiAwKSB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9zb2Z0VlM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zb2Z0ID4gMCkgdnNoYWRlciArPSBzaGFkZXJDaHVua3Muc2NyZWVuRGVwdGhQUztcbiAgICAgICAgICAgIHZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnBhcnRpY2xlX2NwdVZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubG9jYWxTcGFjZSkgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfbG9jYWxTaGlmdFZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbVRleCkgdnNoYWRlciArPSB0aGlzLl9hbmltVGV4KG9wdGlvbnMpO1xuICAgICAgICAgICAgLy8gaWYgKG9wdGlvbnMud3JhcCkgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfd3JhcFZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWxpZ25Ub01vdGlvbikgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfcG9pbnRBbG9uZ1ZTO1xuICAgICAgICAgICAgdnNoYWRlciArPSBvcHRpb25zLm1lc2ggPyBzaGFkZXJDaHVua3MucGFydGljbGVfbWVzaFZTIDogZmFjZVZTO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubm9ybWFsID09PSAxKSB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9ub3JtYWxWUztcbiAgICAgICAgICAgIGlmIChvcHRpb25zLm5vcm1hbCA9PT0gMikgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfVEJOVlM7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zdHJldGNoID4gMC4wKSB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9zdHJldGNoVlM7XG4gICAgICAgICAgICB2c2hhZGVyICs9IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9jcHVfZW5kVlM7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zb2Z0ID4gMCkgdnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfc29mdFZTO1xuICAgICAgICB9XG4gICAgICAgIHZzaGFkZXIgKz0gXCJ9XFxuXCI7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubm9ybWFsID4gMCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubm9ybWFsID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZnNoYWRlciArPSBcIlxcbnZhcnlpbmcgdmVjMyBOb3JtYWw7XFxuXCI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMubm9ybWFsID09PSAyKSB7XG4gICAgICAgICAgICAgICAgZnNoYWRlciArPSBcIlxcbnZhcnlpbmcgbWF0MyBQYXJ0aWNsZU1hdDtcXG5cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZzaGFkZXIgKz0gXCJcXG51bmlmb3JtIHZlYzMgbGlnaHRDdWJlWzZdO1xcblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnNvZnQpIGZzaGFkZXIgKz0gXCJcXG52YXJ5aW5nIGZsb2F0IHZEZXB0aDtcXG5cIjtcblxuICAgICAgICBpZiAoKG9wdGlvbnMubm9ybWFsID09PSAwKSAmJiAob3B0aW9ucy5mb2cgPT09IFwibm9uZVwiKSkgb3B0aW9ucy5zcmdiID0gZmFsc2U7IC8vIGRvbid0IGhhdmUgdG8gcGVyZm9ybSBhbGwgZ2FtbWEgY29udmVyc2lvbnMgd2hlbiBubyBsaWdodGluZyBhbmQgZm9nZ2luZyBpcyB1c2VkXG4gICAgICAgIGZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLmRlY29kZVBTO1xuICAgICAgICBmc2hhZGVyICs9IGdhbW1hQ29kZShvcHRpb25zLmdhbW1hKTtcbiAgICAgICAgZnNoYWRlciArPSB0b25lbWFwQ29kZShvcHRpb25zLnRvbmVNYXApO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmZvZyA9PT0gJ2xpbmVhcicpIHtcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLmZvZ0xpbmVhclBTO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZm9nID09PSAnZXhwJykge1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MuZm9nRXhwUFM7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5mb2cgPT09ICdleHAyJykge1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MuZm9nRXhwMlBTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MuZm9nTm9uZVBTO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubm9ybWFsID09PSAyKSBmc2hhZGVyICs9IFwiXFxudW5pZm9ybSBzYW1wbGVyMkQgbm9ybWFsTWFwO1xcblwiO1xuICAgICAgICBpZiAob3B0aW9ucy5zb2Z0ID4gMCkgZnNoYWRlciArPSBzaGFkZXJDaHVua3Muc2NyZWVuRGVwdGhQUztcbiAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVQUztcbiAgICAgICAgaWYgKG9wdGlvbnMuc29mdCA+IDApIGZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnBhcnRpY2xlX3NvZnRQUztcbiAgICAgICAgaWYgKG9wdGlvbnMubm9ybWFsID09PSAxKSBmc2hhZGVyICs9IFwiXFxudmVjMyBub3JtYWwgPSBOb3JtYWw7XFxuXCI7XG4gICAgICAgIGlmIChvcHRpb25zLm5vcm1hbCA9PT0gMikgZnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfbm9ybWFsTWFwUFM7XG4gICAgICAgIGlmIChvcHRpb25zLm5vcm1hbCA+IDApIGZzaGFkZXIgKz0gb3B0aW9ucy5oYWxmbGFtYmVydCA/IHNoYWRlckNodW5rcy5wYXJ0aWNsZV9oYWxmbGFtYmVydFBTIDogc2hhZGVyQ2h1bmtzLnBhcnRpY2xlX2xhbWJlcnRQUztcbiAgICAgICAgaWYgKG9wdGlvbnMubm9ybWFsID4gMCkgZnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfbGlnaHRpbmdQUztcbiAgICAgICAgaWYgKG9wdGlvbnMuYmxlbmQgPT09IEJMRU5EX05PUk1BTCkge1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfYmxlbmROb3JtYWxQUztcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmJsZW5kID09PSBCTEVORF9BRERJVElWRSkge1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfYmxlbmRBZGRQUztcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmJsZW5kID09PSBCTEVORF9NVUxUSVBMSUNBVElWRSkge1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MucGFydGljbGVfYmxlbmRNdWx0aXBseVBTO1xuICAgICAgICB9XG4gICAgICAgIGZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnBhcnRpY2xlX2VuZFBTO1xuXG4gICAgICAgIHJldHVybiBTaGFkZXJVdGlscy5jcmVhdGVEZWZpbml0aW9uKGRldmljZSwge1xuICAgICAgICAgICAgbmFtZTogJ1BhcnRpY2xlU2hhZGVyJyxcbiAgICAgICAgICAgIHZlcnRleENvZGU6IHZzaGFkZXIsXG4gICAgICAgICAgICBmcmFnbWVudENvZGU6IGZzaGFkZXJcbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuZXhwb3J0IHsgcGFydGljbGUgfTtcbiJdLCJuYW1lcyI6WyJwYXJ0aWNsZSIsImdlbmVyYXRlS2V5Iiwib3B0aW9ucyIsImtleSIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsIl9hbmltVGV4IiwidnNoYWRlciIsImFuaW1UZXhMb29wIiwic2hhZGVyQ2h1bmtzIiwicGFydGljbGVBbmltRnJhbWVMb29wVlMiLCJwYXJ0aWNsZUFuaW1GcmFtZUNsYW1wVlMiLCJwYXJ0aWNsZUFuaW1UZXhWUyIsImNyZWF0ZVNoYWRlckRlZmluaXRpb24iLCJkZXZpY2UiLCJleGVjdXRpb25EZWZpbmUiLCJ1c2VDcHUiLCJmc2hhZGVyIiwibWVzaCIsImxvY2FsU3BhY2UiLCJzY3JlZW5TcGFjZSIsImFuaW1UZXgiLCJub3JtYWwiLCJzb2Z0IiwiZmFjZVZTIiwiY3VzdG9tRmFjZSIsInBhcnRpY2xlX2N1c3RvbUZhY2VWUyIsInBhcnRpY2xlX2JpbGxib2FyZFZTIiwicGFydGljbGVfaW5pdFZTIiwicGFjazgiLCJwYXJ0aWNsZUlucHV0UmdiYThQUyIsInBhcnRpY2xlSW5wdXRGbG9hdFBTIiwic2NyZWVuRGVwdGhQUyIsInBhcnRpY2xlVlMiLCJwYXJ0aWNsZV9sb2NhbFNoaWZ0VlMiLCJ3cmFwIiwicGFydGljbGVfd3JhcFZTIiwiYWxpZ25Ub01vdGlvbiIsInBhcnRpY2xlX3BvaW50QWxvbmdWUyIsInBhcnRpY2xlX21lc2hWUyIsInBhcnRpY2xlX25vcm1hbFZTIiwicGFydGljbGVfVEJOVlMiLCJzdHJldGNoIiwicGFydGljbGVfc3RyZXRjaFZTIiwicGFydGljbGVfZW5kVlMiLCJwYXJ0aWNsZV9zb2Z0VlMiLCJwYXJ0aWNsZV9jcHVWUyIsInBhcnRpY2xlX2NwdV9lbmRWUyIsImZvZyIsInNyZ2IiLCJkZWNvZGVQUyIsImdhbW1hQ29kZSIsImdhbW1hIiwidG9uZW1hcENvZGUiLCJ0b25lTWFwIiwiZm9nTGluZWFyUFMiLCJmb2dFeHBQUyIsImZvZ0V4cDJQUyIsImZvZ05vbmVQUyIsInBhcnRpY2xlUFMiLCJwYXJ0aWNsZV9zb2Z0UFMiLCJwYXJ0aWNsZV9ub3JtYWxNYXBQUyIsImhhbGZsYW1iZXJ0IiwicGFydGljbGVfaGFsZmxhbWJlcnRQUyIsInBhcnRpY2xlX2xhbWJlcnRQUyIsInBhcnRpY2xlX2xpZ2h0aW5nUFMiLCJibGVuZCIsIkJMRU5EX05PUk1BTCIsInBhcnRpY2xlX2JsZW5kTm9ybWFsUFMiLCJCTEVORF9BRERJVElWRSIsInBhcnRpY2xlX2JsZW5kQWRkUFMiLCJCTEVORF9NVUxUSVBMSUNBVElWRSIsInBhcnRpY2xlX2JsZW5kTXVsdGlwbHlQUyIsInBhcnRpY2xlX2VuZFBTIiwiU2hhZGVyVXRpbHMiLCJjcmVhdGVEZWZpbml0aW9uIiwibmFtZSIsInZlcnRleENvZGUiLCJmcmFnbWVudENvZGUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBTUEsTUFBTUEsUUFBUSxHQUFHO0FBQ2JDLEVBQUFBLFdBQVcsRUFBRSxVQUFVQyxPQUFPLEVBQUU7SUFDNUIsSUFBSUMsR0FBRyxHQUFHLFVBQVUsQ0FBQTtBQUNwQixJQUFBLEtBQUssTUFBTUMsSUFBSSxJQUFJRixPQUFPLEVBQUU7QUFDeEIsTUFBQSxJQUFJQSxPQUFPLENBQUNHLGNBQWMsQ0FBQ0QsSUFBSSxDQUFDLEVBQUU7QUFDOUJELFFBQUFBLEdBQUcsSUFBSUQsT0FBTyxDQUFDRSxJQUFJLENBQUMsQ0FBQTtBQUN4QixPQUFBO0FBQ0osS0FBQTtBQUNBLElBQUEsT0FBT0QsR0FBRyxDQUFBO0dBQ2I7QUFFREcsRUFBQUEsUUFBUSxFQUFFLFVBQVVKLE9BQU8sRUFBRTtJQUN6QixJQUFJSyxPQUFPLEdBQUcsRUFBRSxDQUFBO0lBQ2hCQSxPQUFPLElBQUlMLE9BQU8sQ0FBQ00sV0FBVyxHQUFHQyxZQUFZLENBQUNDLHVCQUF1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
