import { SEMANTIC_POSITION } from '../../../platform/graphics/constants.js';
import { shaderChunks } from '../chunks/chunks.js';
import { ChunkUtils } from '../chunk-utils.js';
import { gammaCode, tonemapCode } from './common.js';
import { ShaderUtils } from '../../../platform/graphics/shader-utils.js';

const skybox = {
  generateKey: function (options) {
    return options.type === 'cubemap' ? `skybox-${options.type}-${options.encoding}-${options.useIntensity}-${options.gamma}-${options.toneMapping}-${options.fixSeams}-${options.mip}` : `skybox-${options.type}-${options.encoding}-${options.useIntensity}-${options.gamma}-${options.toneMapping}`;
  },
  createShaderDefinition: function (device, options) {
    let fshader = '';
    if (options.type === 'cubemap') {
      const mip2size = [128, 64, /* 32 */16, 8, 4, 2];
      fshader += options.mip ? shaderChunks.fixCubemapSeamsStretchPS : shaderChunks.fixCubemapSeamsNonePS;
      fshader += options.useIntensity ? shaderChunks.envMultiplyPS : shaderChunks.envConstPS;
      fshader += shaderChunks.decodePS;
      fshader += gammaCode(options.gamma);
      fshader += tonemapCode(options.toneMapping);
      fshader += shaderChunks.skyboxHDRPS.replace(/\$DECODE/g, ChunkUtils.decodeFunc(options.encoding)).replace(/\$FIXCONST/g, 1 - 1 / mip2size[options.mip] + "");
    } else {
      fshader += options.useIntensity ? shaderChunks.envMultiplyPS : shaderChunks.envConstPS;
      fshader += shaderChunks.decodePS;
      fshader += gammaCode(options.gamma);
      fshader += tonemapCode(options.toneMapping);
      fshader += shaderChunks.sphericalPS;
      fshader += shaderChunks.envAtlasPS;
      fshader += shaderChunks.skyboxEnvPS.replace(/\$DECODE/g, ChunkUtils.decodeFunc(options.encoding));
    }
    return ShaderUtils.createDefinition(device, {
      name: 'SkyboxShader',
      attributes: {
        aPosition: SEMANTIC_POSITION
      },
      vertexCode: shaderChunks.skyboxVS,
      fragmentCode: fshader
    });
  }
};

export { skybox };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2t5Ym94LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvc2NlbmUvc2hhZGVyLWxpYi9wcm9ncmFtcy9za3lib3guanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU0VNQU5USUNfUE9TSVRJT04gfSBmcm9tICcuLi8uLi8uLi9wbGF0Zm9ybS9ncmFwaGljcy9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgc2hhZGVyQ2h1bmtzIH0gZnJvbSAnLi4vY2h1bmtzL2NodW5rcy5qcyc7XG5pbXBvcnQgeyBDaHVua1V0aWxzIH0gZnJvbSAnLi4vY2h1bmstdXRpbHMuanMnO1xuXG5pbXBvcnQgeyBnYW1tYUNvZGUsIHRvbmVtYXBDb2RlIH0gZnJvbSAnLi9jb21tb24uanMnO1xuaW1wb3J0IHsgU2hhZGVyVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9wbGF0Zm9ybS9ncmFwaGljcy9zaGFkZXItdXRpbHMuanMnO1xuXG5jb25zdCBza3lib3ggPSB7XG4gICAgZ2VuZXJhdGVLZXk6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnR5cGUgPT09ICdjdWJlbWFwJyA/XG4gICAgICAgICAgICBgc2t5Ym94LSR7b3B0aW9ucy50eXBlfS0ke29wdGlvbnMuZW5jb2Rpbmd9LSR7b3B0aW9ucy51c2VJbnRlbnNpdHl9LSR7b3B0aW9ucy5nYW1tYX0tJHtvcHRpb25zLnRvbmVNYXBwaW5nfS0ke29wdGlvbnMuZml4U2VhbXN9LSR7b3B0aW9ucy5taXB9YCA6XG4gICAgICAgICAgICBgc2t5Ym94LSR7b3B0aW9ucy50eXBlfS0ke29wdGlvbnMuZW5jb2Rpbmd9LSR7b3B0aW9ucy51c2VJbnRlbnNpdHl9LSR7b3B0aW9ucy5nYW1tYX0tJHtvcHRpb25zLnRvbmVNYXBwaW5nfWA7XG4gICAgfSxcblxuICAgIGNyZWF0ZVNoYWRlckRlZmluaXRpb246IGZ1bmN0aW9uIChkZXZpY2UsIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IGZzaGFkZXIgPSAnJztcbiAgICAgICAgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ2N1YmVtYXAnKSB7XG4gICAgICAgICAgICBjb25zdCBtaXAyc2l6ZSA9IFsxMjgsIDY0LCAvKiAzMiAqLyAxNiwgOCwgNCwgMl07XG4gICAgICAgICAgICBmc2hhZGVyICs9IG9wdGlvbnMubWlwID8gc2hhZGVyQ2h1bmtzLmZpeEN1YmVtYXBTZWFtc1N0cmV0Y2hQUyA6IHNoYWRlckNodW5rcy5maXhDdWJlbWFwU2VhbXNOb25lUFM7XG4gICAgICAgICAgICBmc2hhZGVyICs9IG9wdGlvbnMudXNlSW50ZW5zaXR5ID8gc2hhZGVyQ2h1bmtzLmVudk11bHRpcGx5UFMgOiBzaGFkZXJDaHVua3MuZW52Q29uc3RQUztcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLmRlY29kZVBTO1xuICAgICAgICAgICAgZnNoYWRlciArPSBnYW1tYUNvZGUob3B0aW9ucy5nYW1tYSk7XG4gICAgICAgICAgICBmc2hhZGVyICs9IHRvbmVtYXBDb2RlKG9wdGlvbnMudG9uZU1hcHBpbmcpO1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3Muc2t5Ym94SERSUFNcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwkREVDT0RFL2csIENodW5rVXRpbHMuZGVjb2RlRnVuYyhvcHRpb25zLmVuY29kaW5nKSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwkRklYQ09OU1QvZywgKDEgLSAxIC8gbWlwMnNpemVbb3B0aW9ucy5taXBdKSArIFwiXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnNoYWRlciArPSBvcHRpb25zLnVzZUludGVuc2l0eSA/IHNoYWRlckNodW5rcy5lbnZNdWx0aXBseVBTIDogc2hhZGVyQ2h1bmtzLmVudkNvbnN0UFM7XG4gICAgICAgICAgICBmc2hhZGVyICs9IHNoYWRlckNodW5rcy5kZWNvZGVQUztcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gZ2FtbWFDb2RlKG9wdGlvbnMuZ2FtbWEpO1xuICAgICAgICAgICAgZnNoYWRlciArPSB0b25lbWFwQ29kZShvcHRpb25zLnRvbmVNYXBwaW5nKTtcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnNwaGVyaWNhbFBTO1xuICAgICAgICAgICAgZnNoYWRlciArPSBzaGFkZXJDaHVua3MuZW52QXRsYXNQUztcbiAgICAgICAgICAgIGZzaGFkZXIgKz0gc2hhZGVyQ2h1bmtzLnNreWJveEVudlBTLnJlcGxhY2UoL1xcJERFQ09ERS9nLCBDaHVua1V0aWxzLmRlY29kZUZ1bmMob3B0aW9ucy5lbmNvZGluZykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNoYWRlclV0aWxzLmNyZWF0ZURlZmluaXRpb24oZGV2aWNlLCB7XG4gICAgICAgICAgICBuYW1lOiAnU2t5Ym94U2hhZGVyJyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgICBhUG9zaXRpb246IFNFTUFOVElDX1BPU0lUSU9OXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmVydGV4Q29kZTogc2hhZGVyQ2h1bmtzLnNreWJveFZTLFxuICAgICAgICAgICAgZnJhZ21lbnRDb2RlOiBmc2hhZGVyXG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IHNreWJveCB9O1xuIl0sIm5hbWVzIjpbInNreWJveCIsImdlbmVyYXRlS2V5Iiwib3B0aW9ucyIsInR5cGUiLCJlbmNvZGluZyIsInVzZUludGVuc2l0eSIsImdhbW1hIiwidG9uZU1hcHBpbmciLCJmaXhTZWFtcyIsIm1pcCIsImNyZWF0ZVNoYWRlckRlZmluaXRpb24iLCJkZXZpY2UiLCJmc2hhZGVyIiwibWlwMnNpemUiLCJzaGFkZXJDaHVua3MiLCJmaXhDdWJlbWFwU2VhbXNTdHJldGNoUFMiLCJmaXhDdWJlbWFwU2VhbXNOb25lUFMiLCJlbnZNdWx0aXBseVBTIiwiZW52Q29uc3RQUyIsImRlY29kZVBTIiwiZ2FtbWFDb2RlIiwidG9uZW1hcENvZGUiLCJza3lib3hIRFJQUyIsInJlcGxhY2UiLCJDaHVua1V0aWxzIiwiZGVjb2RlRnVuYyIsInNwaGVyaWNhbFBTIiwiZW52QXRsYXNQUyIsInNreWJveEVudlBTIiwiU2hhZGVyVXRpbHMiLCJjcmVhdGVEZWZpbml0aW9uIiwibmFtZSIsImF0dHJpYnV0ZXMiLCJhUG9zaXRpb24iLCJTRU1BTlRJQ19QT1NJVElPTiIsInZlcnRleENvZGUiLCJza3lib3hWUyIsImZyYWdtZW50Q29kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0EsTUFBTUEsTUFBTSxHQUFHO0FBQ1hDLEVBQUFBLFdBQVcsRUFBRSxVQUFVQyxPQUFPLEVBQUU7SUFDNUIsT0FBT0EsT0FBTyxDQUFDQyxJQUFJLEtBQUssU0FBUyxHQUM1QixDQUFBLE9BQUEsRUFBU0QsT0FBTyxDQUFDQyxJQUFLLENBQUEsQ0FBQSxFQUFHRCxPQUFPLENBQUNFLFFBQVMsQ0FBR0YsQ0FBQUEsRUFBQUEsT0FBTyxDQUFDRyxZQUFhLENBQUdILENBQUFBLEVBQUFBLE9BQU8sQ0FBQ0ksS0FBTSxDQUFHSixDQUFBQSxFQUFBQSxPQUFPLENBQUNLLFdBQVksQ0FBR0wsQ0FBQUEsRUFBQUEsT0FBTyxDQUFDTSxRQUFTLENBQUEsQ0FBQSxFQUFHTixPQUFPLENBQUNPLEdBQUksQ0FBQSxDQUFDLEdBQzlJLENBQUEsT0FBQSxFQUFTUCxPQUFPLENBQUNDLElBQUssQ0FBQSxDQUFBLEVBQUdELE9BQU8sQ0FBQ0UsUUFBUyxDQUFHRixDQUFBQSxFQUFBQSxPQUFPLENBQUNHLFlBQWEsQ0FBR0gsQ0FBQUEsRUFBQUEsT0FBTyxDQUFDSSxLQUFNLENBQUdKLENBQUFBLEVBQUFBLE9BQU8sQ0FBQ0ssV0FBWSxDQUFDLENBQUEsQ0FBQTtHQUNuSDtBQUVERyxFQUFBQSxzQkFBc0IsRUFBRSxVQUFVQyxNQUFNLEVBQUVULE9BQU8sRUFBRTtJQUMvQyxJQUFJVSxPQUFPLEdBQUcsRUFBRSxDQUFBO0FBQ2hCLElBQUEsSUFBSVYsT0FBTyxDQUFDQyxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQzVCLE1BQUEsTUFBTVUsUUFBUSxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsVUFBVyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtNQUNoREQsT0FBTyxJQUFJVixPQUFPLENBQUNPLEdBQUcsR0FBR0ssWUFBWSxDQUFDQyx3QkFBd0IsR0FBR0QsWUFBWSxDQUFDRSxxQkFBcUIsQ0FBQTtNQUNuR0osT0FBTyxJQUFJVixPQUFPLENBQUNHLFlBQVksR0FBR1MsWUFBWSxDQUFDRyxhQUFhLEdBQUdILFlBQVksQ0FBQ0ksVUFBVSxDQUFBO01BQ3RGTixPQUFPLElBQUlFLFlBQVksQ0FBQ0ssUUFBUSxDQUFBO0FBQ2hDUCxNQUFBQSxPQUFPLElBQUlRLFNBQVMsQ0FBQ2xCLE9BQU8sQ0FBQ0ksS0FBSyxDQUFDLENBQUE7QUFDbkNNLE1BQUFBLE9BQU8sSUFBSVMsV0FBVyxDQUFDbkIsT0FBTyxDQUFDSyxXQUFXLENBQUMsQ0FBQTtBQUMzQ0ssTUFBQUEsT0FBTyxJQUFJRSxZQUFZLENBQUNRLFdBQVcsQ0FDOUJDLE9BQU8sQ0FBQyxXQUFXLEVBQUVDLFVBQVUsQ0FBQ0MsVUFBVSxDQUFDdkIsT0FBTyxDQUFDRSxRQUFRLENBQUMsQ0FBQyxDQUM3RG1CLE9BQU8sQ0FBQyxhQUFhLEVBQUcsQ0FBQyxHQUFHLENBQUMsR0FBR1YsUUFBUSxDQUFDWCxPQUFPLENBQUNPLEdBQUcsQ0FBQyxHQUFJLEVBQUUsQ0FBQyxDQUFBO0FBQ3JFLEtBQUMsTUFBTTtNQUNIRyxPQUFPLElBQUlWLE9BQU8sQ0FBQ0csWUFBWSxHQUFHUyxZQUFZLENBQUNHLGFBQWEsR0FBR0gsWUFBWSxDQUFDSSxVQUFVLENBQUE7TUFDdEZOLE9BQU8sSUFBSUUsWUFBWSxDQUFDSyxRQUFRLENBQUE7QUFDaENQLE1BQUFBLE9BQU8sSUFBSVEsU0FBUyxDQUFDbEIsT0FBTyxDQUFDSSxLQUFLLENBQUMsQ0FBQTtBQUNuQ00sTUFBQUEsT0FBTyxJQUFJUyxXQUFXLENBQUNuQixPQUFPLENBQUNLLFdBQVcsQ0FBQyxDQUFBO01BQzNDSyxPQUFPLElBQUlFLFlBQVksQ0FBQ1ksV0FBVyxDQUFBO01BQ25DZCxPQUFPLElBQUlFLFlBQVksQ0FBQ2EsVUFBVSxDQUFBO0FBQ2xDZixNQUFBQSxPQUFPLElBQUlFLFlBQVksQ0FBQ2MsV0FBVyxDQUFDTCxPQUFPLENBQUMsV0FBVyxFQUFFQyxVQUFVLENBQUNDLFVBQVUsQ0FBQ3ZCLE9BQU8sQ0FBQ0UsUUFBUSxDQUFDLENBQUMsQ0FBQTtBQUNyRyxLQUFBO0FBRUEsSUFBQSxPQUFPeUIsV0FBVyxDQUFDQyxnQkFBZ0IsQ0FBQ25CLE1BQU0sRUFBRTtBQUN4Q29CLE1BQUFBLElBQUksRUFBRSxjQUFjO0FBQ3BCQyxNQUFBQSxVQUFVLEVBQUU7QUFDUkMsUUFBQUEsU0FBUyxFQUFFQyxpQkFBQUE7T0FDZDtNQUNEQyxVQUFVLEVBQUVyQixZQUFZLENBQUNzQixRQUFRO0FBQ2pDQyxNQUFBQSxZQUFZLEVBQUV6QixPQUFBQTtBQUNsQixLQUFDLENBQUMsQ0FBQTtBQUNOLEdBQUE7QUFDSjs7OzsifQ==
