import"../../../core/debug.js";import{WebgpuVertexBufferLayout as e}from"./webgpu-vertex-buffer-layout.js";import"./webgpu-debug.js";const t=["point-list","line-list",void 0,"line-strip","triangle-list","triangle-strip",void 0],r=["add","subtract","reverse-subtract","min","max"],a=["zero","one","src","one-minus-src","dst","one-minus-dst","src-alpha","src-alpha-saturated","one-minus-src-alpha","dst-alpha","one-minus-dst-alpha","constant","one-minus-constant"],o=["never","less","equal","less-equal","greater","not-equal","greater-equal","always"],i=["none","back","front"],n=["keep","zero","replace","increment-clamp","increment-wrap","decrement-clamp","decrement-wrap","invert"],s=[];class l{constructor(t){this.device=t,this.vertexBufferLayout=new e,this.cache=new Map}get(e,r,a,o,i,n,s,l,c,p,u,d){const h=this.getKey(e,r,a,o,i,n,s,l,c,p,u,d);let m=this.cache.get(h);if(!m){const g=t[e.type],f=this.getPipelineLayout(n),y=this.vertexBufferLayout.get(r,a);m=this.create(g,o,i,f,s,l,y,c,p,u,d),this.cache.set(h,m)}return m}getKey(e,t,r,a,o,i,n,s,l,c,p,u){let d="";for(let e=0;e<i.length;e++)d+=i[e].key;const h=this.vertexBufferLayout.getKey(t,r),m=o.impl.key,g=c?p.key+u.key:"";return h+a.impl.vertexCode+a.impl.fragmentCode+m+e.type+d+n.key+s.key+l+g}getPipelineLayout(e){e.forEach((e=>{s.push(e.bindGroupLayout)}));const t={bindGroupLayouts:s},r=this.device.wgpu.createPipelineLayout(t);return s.length=0,r}getBlend(e){let t;return e.blend&&(t={color:{operation:r[e.colorOp],srcFactor:a[e.colorSrcFactor],dstFactor:a[e.colorDstFactor]},alpha:{operation:r[e.alphaOp],srcFactor:a[e.alphaSrcFactor],dstFactor:a[e.alphaDstFactor]}}),t}getDepthStencil(e,t,r,a,i){let s;const{depth:l,stencil:c}=t;return(l||c)&&(s={format:t.impl.depthFormat},l?(s.depthWriteEnabled=e.write,s.depthCompare=o[e.func]):(s.depthWriteEnabled=!1,s.depthCompare="always"),c&&r&&(s.stencilReadMas=a.readMask,s.stencilWriteMask=a.writeMask,s.stencilFront={compare:o[a.func],failOp:n[a.fail],passOp:n[a.zpass],depthFailOp:n[a.zfail]},s.stencilBack={compare:o[i.func],failOp:n[i.fail],passOp:n[i.zpass],depthFailOp:n[i.zfail]})),s}create(e,t,r,a,o,n,s,l,c,p,u){const d=this.device.wgpu,h=t.impl,m={vertex:{module:h.getVertexShaderModule(),entryPoint:h.vertexEntryPoint,buffers:s},fragment:{module:h.getFragmentShaderModule(),entryPoint:h.fragmentEntryPoint,targets:[]},primitive:{topology:e,frontFace:"ccw",cullMode:i[l]},depthStencil:this.getDepthStencil(n,r,c,p,u),multisample:{count:r.samples},layout:a},g=r.impl.colorFormat;if(g){let e=0;o.redWrite&&(e|=GPUColorWrite.RED),o.greenWrite&&(e|=GPUColorWrite.GREEN),o.blueWrite&&(e|=GPUColorWrite.BLUE),o.alphaWrite&&(e|=GPUColorWrite.ALPHA),m.fragment.targets.push({format:g,writeMask:e,blend:this.getBlend(o)})}return d.createRenderPipeline(m)}}export{l as WebgpuRenderPipeline};
