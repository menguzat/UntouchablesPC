import"../../../core/debug.js";import{SAMPLETYPE_FLOAT as t,SAMPLETYPE_UNFILTERABLE_FLOAT as e,SAMPLETYPE_DEPTH as i}from"../constants.js";import{WebgpuUtils as s}from"./webgpu-utils.js";const r=[];r[t]="filtering",r[e]="non-filtering",r[i]="comparison";const o=[];o[t]="float",o[e]="unfilterable-float",o[i]="depth";class n{constructor(t){const e=t.device,{key:i,descr:s}=this.createDescriptor(t);this.key=i,this.bindGroupLayout=e.wgpu.createBindGroupLayout(s)}destroy(){this.bindGroupLayout=null}loseContext(){}getTextureSlot(t,e){return t.bufferFormats.length+2*e}createDescriptor(t){const e=[];let i="",n=0;t.bufferFormats.forEach((t=>{const r=s.shaderStage(t.visibility);i+=`#${n}U:${r}`,e.push({binding:n++,visibility:r,buffer:{type:"uniform",hasDynamicOffset:!1}})})),t.textureFormats.forEach((t=>{const a=s.shaderStage(t.visibility),u=t.sampleType,l=t.textureDimension,c=o[u];i+=`#${n}T:${a}-${c}-${l}-false`,e.push({binding:n++,visibility:a,texture:{sampleType:c,viewDimension:l,multisampled:false}});const p=r[u];i+=`#${n}S:${a}-${p}`,e.push({binding:n++,visibility:a,sampler:{type:p}})}));return{key:i,descr:{entries:e}}}}export{n as WebgpuBindGroupFormat};
