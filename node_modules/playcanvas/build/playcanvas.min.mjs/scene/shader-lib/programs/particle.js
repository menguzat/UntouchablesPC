import{ShaderUtils as e}from"../../../platform/graphics/shader-utils.js";import{BLEND_NORMAL as a,BLEND_ADDITIVE as n,BLEND_MULTIPLICATIVE as r}from"../../constants.js";import{shaderChunks as t}from"../chunks/chunks.js";import{gammaCode as i,tonemapCode as l}from"./common.js";const o={generateKey:function(e){let a="particle";for(const n in e)e.hasOwnProperty(n)&&(a+=e[n]);return a},_animTex:function(e){let a="";return a+=e.animTexLoop?t.particleAnimFrameLoopVS:t.particleAnimFrameClampVS,a+=t.particleAnimTexVS,a},createShaderDefinition:function(o,c){const m=`#define PARTICLE_${c.useCpu?"CPU":"GPU"}\n`;let p="#define PARTICLE\n"+m,S="#define VERTEXSHADER\n"+m;c.mesh&&(S+="#define USE_MESH\n"),c.localSpace&&(S+="#define LOCAL_SPACE\n"),c.screenSpace&&(S+="#define SCREEN_SPACE\n"),c.animTex&&(S+="\nuniform vec2 animTexTilesParams;\n"),c.animTex&&(S+="\nuniform vec4 animTexParams;\n"),c.animTex&&(S+="\nuniform vec2 animTexIndexParams;\n"),2===c.normal&&(S+="\nvarying mat3 ParticleMat;\n"),1===c.normal&&(S+="\nvarying vec3 Normal;\n"),c.soft&&(S+="\nvarying float vDepth;\n");const s=c.customFace?t.particle_customFaceVS:t.particle_billboardVS;return c.useCpu?(c.soft>0&&(S+=t.screenDepthPS),S+=t.particle_cpuVS,c.localSpace&&(S+=t.particle_localShiftVS),c.animTex&&(S+=this._animTex(c)),c.alignToMotion&&(S+=t.particle_pointAlongVS),S+=c.mesh?t.particle_meshVS:s,1===c.normal&&(S+=t.particle_normalVS),2===c.normal&&(S+=t.particle_TBNVS),c.stretch>0&&(S+=t.particle_stretchVS),S+=t.particle_cpu_endVS,c.soft>0&&(S+=t.particle_softVS)):(S+=t.particle_initVS,S+=c.pack8?t.particleInputRgba8PS:t.particleInputFloatPS,c.soft>0&&(S+=t.screenDepthPS),S+=t.particleVS,c.localSpace&&(S+=t.particle_localShiftVS),c.animTex&&(S+=this._animTex(c)),c.wrap&&(S+=t.particle_wrapVS),c.alignToMotion&&(S+=t.particle_pointAlongVS),S+=c.mesh?t.particle_meshVS:s,1===c.normal&&(S+=t.particle_normalVS),2===c.normal&&(S+=t.particle_TBNVS),c.stretch>0&&(S+=t.particle_stretchVS),S+=t.particle_endVS,c.soft>0&&(S+=t.particle_softVS)),S+="}\n",c.normal>0&&(1===c.normal?p+="\nvarying vec3 Normal;\n":2===c.normal&&(p+="\nvarying mat3 ParticleMat;\n"),p+="\nuniform vec3 lightCube[6];\n"),c.soft&&(p+="\nvarying float vDepth;\n"),0===c.normal&&"none"===c.fog&&(c.srgb=!1),p+=t.decodePS,p+=i(c.gamma),p+=l(c.toneMap),"linear"===c.fog?p+=t.fogLinearPS:"exp"===c.fog?p+=t.fogExpPS:"exp2"===c.fog?p+=t.fogExp2PS:p+=t.fogNonePS,2===c.normal&&(p+="\nuniform sampler2D normalMap;\n"),c.soft>0&&(p+=t.screenDepthPS),p+=t.particlePS,c.soft>0&&(p+=t.particle_softPS),1===c.normal&&(p+="\nvec3 normal = Normal;\n"),2===c.normal&&(p+=t.particle_normalMapPS),c.normal>0&&(p+=c.halflambert?t.particle_halflambertPS:t.particle_lambertPS),c.normal>0&&(p+=t.particle_lightingPS),c.blend===a?p+=t.particle_blendNormalPS:c.blend===n?p+=t.particle_blendAddPS:c.blend===r&&(p+=t.particle_blendMultiplyPS),p+=t.particle_endPS,e.createDefinition(o,{name:"ParticleShader",vertexCode:S,fragmentCode:p})}};export{o as particle};
