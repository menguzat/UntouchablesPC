var e="\n//RG=X, BA=Y\n//RG=Z, BA=A\n//RGB=V, A=visMode\n//RGBA=life\n\n#define PI2 6.283185307179586\n\nuniform vec3 inBoundsSize;\nuniform vec3 inBoundsCenter;\n\nuniform float maxVel;\n\nfloat decodeFloatRG(vec2 rg) {\n\t\treturn rg.y*(1.0/255.0) + rg.x;\n}\n\nfloat decodeFloatRGBA( vec4 rgba ) {\n\treturn dot( rgba, vec4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/160581375.0) );\n}\n\nvoid readInput(float uv) {\n\t\tvec4 tex0 = texture2D(particleTexIN, vec2(uv, 0.125));\n\t\tvec4 tex1 = texture2D(particleTexIN, vec2(uv, 0.375));\n\t\tvec4 tex2 = texture2D(particleTexIN, vec2(uv, 0.625));\n\t\tvec4 tex3 = texture2D(particleTexIN, vec2(uv, 0.875));\n\n\t\tinPos = vec3(decodeFloatRG(tex0.rg), decodeFloatRG(tex0.ba), decodeFloatRG(tex1.rg));\n\t\tinPos = (inPos - vec3(0.5)) * inBoundsSize + inBoundsCenter;\n\n\t\tinVel = tex2.xyz;\n\t\tinVel = (inVel - vec3(0.5)) * maxVel;\n\n\t\tinAngle = decodeFloatRG(tex1.ba) * PI2;\n\t\tinShow = tex2.a > 0.5;\n\n\t\tinLife = decodeFloatRGBA(tex3);\n\t\tfloat maxNegLife = max(lifetime, (numParticles - 1.0) * (rate+rateDiv));\n\t\tfloat maxPosLife = lifetime+1.0;\n\t\tinLife = inLife * (maxNegLife + maxPosLife) - maxNegLife;\n}\n";export{e as default};
