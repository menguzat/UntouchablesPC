var n="\nuniform mat3 spawnBounds;\nuniform vec3 spawnPosInnerRatio;\n\nvec3 calcSpawnPosition(vec3 inBounds, float rndFactor) {\n\t\tvec3 pos = inBounds - vec3(0.5);\n\n\t\tvec3 posAbs = abs(pos);\n\t\tvec3 maxPos = vec3(max(posAbs.x, max(posAbs.y, posAbs.z)));\n\n\t\tvec3 edge = maxPos + (vec3(0.5) - maxPos) * spawnPosInnerRatio;\n\n\t\tpos.x = edge.x * (maxPos.x == posAbs.x ? sign(pos.x) : 2.0 * pos.x);\n\t\tpos.y = edge.y * (maxPos.y == posAbs.y ? sign(pos.y) : 2.0 * pos.y);\n\t\tpos.z = edge.z * (maxPos.z == posAbs.z ? sign(pos.z) : 2.0 * pos.z);\n\n#ifndef LOCAL_SPACE\n\t\treturn emitterPos + spawnBounds * pos;\n#else\n\t\treturn spawnBounds * pos;\n#endif\n}\n\nvoid addInitialVelocity(inout vec3 localVelocity, vec3 inBounds) {\n\t\tlocalVelocity -= vec3(0, 0, initialVelocity);\n}\n";export{n as default};
