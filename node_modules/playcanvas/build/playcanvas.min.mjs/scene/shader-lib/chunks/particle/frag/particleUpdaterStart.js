var t="\nfloat saturate(float x) {\n\t\treturn clamp(x, 0.0, 1.0);\n}\n\nvec3 unpack3NFloats(float src) {\n\t\tfloat r = fract(src);\n\t\tfloat g = fract(src * 256.0);\n\t\tfloat b = fract(src * 65536.0);\n\t\treturn vec3(r, g, b);\n}\n\nvec3 tex1Dlod_lerp(highp sampler2D tex, vec2 tc, out vec3 w) {\n\t\tvec4 a = texture2D(tex, tc);\n\t\tvec4 b = texture2D(tex, tc + graphSampleSize);\n\t\tfloat c = fract(tc.x * graphNumSamples);\n\n\t\tvec3 unpackedA = unpack3NFloats(a.w);\n\t\tvec3 unpackedB = unpack3NFloats(b.w);\n\t\tw = mix(unpackedA, unpackedB, c);\n\n\t\treturn mix(a.xyz, b.xyz, c);\n}\n\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\nvec4 hash41(float p) {\n\t\tvec4 p4 = fract(vec4(p) * HASHSCALE4);\n\t\tp4 += dot(p4, p4.wzxy+19.19);\n\t\treturn fract(vec4((p4.x + p4.y)*p4.z, (p4.x + p4.z)*p4.y, (p4.y + p4.z)*p4.w, (p4.z + p4.w)*p4.x));\n}\n\nvoid main(void) {\n\t\tif (gl_FragCoord.x > numParticles) discard;\n\n\t\treadInput(vUv0.x);\n\t\tvisMode = inShow? 1.0 : -1.0;\n\n\t\tvec4 rndFactor = hash41(gl_FragCoord.x + seed);\n\n\t\tfloat particleRate = rate + rateDiv * rndFactor.x;\n\n\t\toutLife = inLife + delta;\n\t\tfloat nlife = clamp(outLife / lifetime, 0.0, 1.0);\n\n\t\tvec3 localVelocityDiv;\n\t\tvec3 velocityDiv;\n\t\tvec3 paramDiv;\n\t\tvec3 localVelocity = tex1Dlod_lerp(internalTex0, vec2(nlife, 0), localVelocityDiv);\n\t\tvec3 velocity =      tex1Dlod_lerp(internalTex1, vec2(nlife, 0), velocityDiv);\n\t\tvec3 params =        tex1Dlod_lerp(internalTex2, vec2(nlife, 0), paramDiv);\n\t\tfloat rotSpeed = params.x;\n\t\tfloat rotSpeedDiv = paramDiv.y;\n\n\t\tvec3 radialParams = tex1Dlod_lerp(internalTex3, vec2(nlife, 0), paramDiv);\n\t\tfloat radialSpeed = radialParams.x;\n\t\tfloat radialSpeedDiv = radialParams.y;\n\n\t\tbool respawn = inLife <= 0.0 || outLife >= lifetime;\n\t\tinPos = respawn ? calcSpawnPosition(rndFactor.xyz, rndFactor.x) : inPos;\n\t\tinAngle = respawn ? mix(startAngle, startAngle2, rndFactor.x) : inAngle;\n\n#ifndef LOCAL_SPACE\n\t\tvec3 radialVel = inPos - emitterPos;\n#else\n\t\tvec3 radialVel = inPos;\n#endif\n\t\tradialVel = (dot(radialVel, radialVel) > 1.0E-8) ? radialSpeed * normalize(radialVel) : vec3(0.0);\n\t\tradialVel += (radialSpeedDiv * vec3(2.0) - vec3(1.0)) * radialSpeedDivMult * rndFactor.xyz;\n\n\t\tlocalVelocity +=    (localVelocityDiv * vec3(2.0) - vec3(1.0)) * localVelocityDivMult * rndFactor.xyz;\n\t\tvelocity +=         (velocityDiv * vec3(2.0) - vec3(1.0)) * velocityDivMult * rndFactor.xyz;\n\t\trotSpeed +=         (rotSpeedDiv * 2.0 - 1.0) * rotSpeedDivMult * rndFactor.y;\n\n\t\taddInitialVelocity(localVelocity, rndFactor.xyz);\n\n#ifndef LOCAL_SPACE\n\t\toutVel = emitterMatrix * localVelocity + (radialVel + velocity) * emitterScale;\n#else\n\t\toutVel = (localVelocity + radialVel) / emitterScale + emitterMatrixInv * velocity;\n#endif\n\n\t\toutPos = inPos + outVel * delta;\n\t\toutAngle = inAngle + rotSpeed * delta;\n";export{t as default};
