import t from"./decode.js";import e from"./encode.js";var n=`\n// This shader requires the following #DEFINEs:\n//\n// PROCESS_FUNC - must be one of reproject, prefilter\n// DECODE_FUNC - must be one of decodeRGBM, decodeRGBE, decodeGamma or decodeLinear\n// ENCODE_FUNC - must be one of encodeRGBM, encodeRGBE, encideGamma or encodeLinear\n// SOURCE_FUNC - must be one of sampleCubemap, sampleEquirect, sampleOctahedral\n// TARGET_FUNC - must be one of getDirectionCubemap, getDirectionEquirect, getDirectionOctahedral\n//\n// When filtering:\n// NUM_SAMPLES - number of samples\n// NUM_SAMPLES_SQRT - sqrt of number of samples\n\nvarying vec2 vUv0;\n\n// source\n#ifdef CUBEMAP_SOURCE\n\t\tuniform samplerCube sourceCube;\n#else\n\t\tuniform sampler2D sourceTex;\n#endif\n\n#ifdef USE_SAMPLES_TEX\n\t\t// samples\n\t\tuniform sampler2D samplesTex;\n\t\tuniform vec2 samplesTexInverseSize;\n#endif\n\n// params:\n// x - target cubemap face 0..6\n// y - specular power (when prefiltering)\n// z - source cubemap seam scale (0 to disable)\n// w - target cubemap size for seam calc (0 to disable)\nuniform vec4 params;\n\n// params2:\n// x - target image total pixels\n// y - source cubemap size\nuniform vec2 params2;\n\nfloat targetFace() { return params.x; }\nfloat specularPower() { return params.y; }\nfloat sourceCubeSeamScale() { return params.z; }\nfloat targetCubeSeamScale() { return params.w; }\n\nfloat targetTotalPixels() { return params2.x; }\nfloat sourceTotalPixels() { return params2.y; }\n\nfloat PI = 3.141592653589793;\n\nfloat saturate(float x) {\n\t\treturn clamp(x, 0.0, 1.0);\n}\n\n${t}\n${e}\n\n//-- supported projections\n\nvec3 modifySeams(vec3 dir, float scale) {\n\t\tvec3 adir = abs(dir);\n\t\tfloat M = max(max(adir.x, adir.y), adir.z);\n\t\treturn dir / M * vec3(\n\t\t\t\tadir.x == M ? 1.0 : scale,\n\t\t\t\tadir.y == M ? 1.0 : scale,\n\t\t\t\tadir.z == M ? 1.0 : scale\n\t\t);\n}\n\nvec2 toSpherical(vec3 dir) {\n\t\treturn vec2(dir.xz == vec2(0.0) ? 0.0 : atan(dir.x, dir.z), asin(dir.y));\n}\n\nvec3 fromSpherical(vec2 uv) {\n\t\treturn vec3(cos(uv.y) * sin(uv.x),\n\t\t\t\t\t\t\t\tsin(uv.y),\n\t\t\t\t\t\t\t\tcos(uv.y) * cos(uv.x));\n}\n\nvec3 getDirectionEquirect() {\n\t\treturn fromSpherical((vec2(vUv0.x, 1.0 - vUv0.y) * 2.0 - 1.0) * vec2(PI, PI * 0.5));\n}\n\n// octahedral code, based on http://jcgt.org/published/0003/02/01\n// "Survey of Efficient Representations for Independent Unit Vectors" by Cigolle, Donow, Evangelakos, Mara, McGuire, Meyer\n\nfloat signNotZero(float k){\n\t\treturn(k >= 0.0) ? 1.0 : -1.0;\n}\n\nvec2 signNotZero(vec2 v) {\n\t\treturn vec2(signNotZero(v.x), signNotZero(v.y));\n}\n\n// Returns a unit vector. Argument o is an octahedral vector packed via octEncode, on the [-1, +1] square\nvec3 octDecode(vec2 o) {\n\t\tvec3 v = vec3(o.x, 1.0 - abs(o.x) - abs(o.y), o.y);\n\t\tif (v.y < 0.0) {\n\t\t\t\tv.xz = (1.0 - abs(v.zx)) * signNotZero(v.xz);\n\t\t}\n\t\treturn normalize(v);\n}\n\nvec3 getDirectionOctahedral() {\n\t\treturn octDecode(vec2(vUv0.x, 1.0 - vUv0.y) * 2.0 - 1.0);\n}\n\n// Assumes that v is a unit vector. The result is an octahedral vector on the [-1, +1] square\nvec2 octEncode(in vec3 v) {\n\t\tfloat l1norm = abs(v.x) + abs(v.y) + abs(v.z);\n\t\tvec2 result = v.xz * (1.0 / l1norm);\n\t\tif (v.y < 0.0) {\n\t\t\t\tresult = (1.0 - abs(result.yx)) * signNotZero(result.xy);\n\t\t}\n\t\treturn result;\n}\n\n/////////////////////////////////////////////////////////////////////\n\n#ifdef CUBEMAP_SOURCE\n\t\tvec4 sampleCubemap(vec3 dir) {\n\t\t\t\treturn textureCube(sourceCube, modifySeams(dir, 1.0 - sourceCubeSeamScale()));\n\t\t}\n\n\t\tvec4 sampleCubemap(vec2 sph) {\n\t\treturn sampleCubemap(fromSpherical(sph));\n}\n\n\t\tvec4 sampleCubemap(vec3 dir, float mipLevel) {\n\t\t\t\treturn textureCubeLodEXT(sourceCube, modifySeams(dir, 1.0 - exp2(mipLevel) * sourceCubeSeamScale()), mipLevel);\n\t\t}\n\n\t\tvec4 sampleCubemap(vec2 sph, float mipLevel) {\n\t\t\t\treturn sampleCubemap(fromSpherical(sph), mipLevel);\n\t\t}\n#else\n\n\t\tvec4 sampleEquirect(vec2 sph) {\n\t\t\t\tvec2 uv = sph / vec2(PI * 2.0, PI) + 0.5;\n\t\t\t\treturn texture2D(sourceTex, vec2(uv.x, 1.0 - uv.y));\n\t\t}\n\n\t\tvec4 sampleEquirect(vec3 dir) {\n\t\t\t\treturn sampleEquirect(toSpherical(dir));\n\t\t}\n\n\t\tvec4 sampleEquirect(vec2 sph, float mipLevel) {\n\t\t\t\tvec2 uv = sph / vec2(PI * 2.0, PI) + 0.5;\n\t\t\t\treturn texture2DLodEXT(sourceTex, vec2(uv.x, 1.0 - uv.y), mipLevel);\n\t\t}\n\n\t\tvec4 sampleEquirect(vec3 dir, float mipLevel) {\n\t\t\t\treturn sampleEquirect(toSpherical(dir), mipLevel);\n\t\t}\n\n\t\tvec4 sampleOctahedral(vec3 dir) {\n\t\t\t\tvec2 uv = octEncode(dir) * 0.5 + 0.5;\n\t\t\t\treturn texture2D(sourceTex, vec2(uv.x, 1.0 - uv.y));\n\t\t}\n\n\t\tvec4 sampleOctahedral(vec2 sph) {\n\t\t\t\treturn sampleOctahedral(fromSpherical(sph));\n\t\t}\n\n\t\tvec4 sampleOctahedral(vec3 dir, float mipLevel) {\n\t\t\t\tvec2 uv = octEncode(dir) * 0.5 + 0.5;\n\t\t\t\treturn texture2DLodEXT(sourceTex, vec2(uv.x, 1.0 - uv.y), mipLevel);\n\t\t}\n\n\t\tvec4 sampleOctahedral(vec2 sph, float mipLevel) {\n\t\t\t\treturn sampleOctahedral(fromSpherical(sph), mipLevel);\n\t\t}\n\n#endif\n\nvec3 getDirectionCubemap() {\n\t\tvec2 st = vUv0 * 2.0 - 1.0;\n\t\tfloat face = targetFace();\n\n\t\tvec3 vec;\n\t\tif (face == 0.0) {\n\t\t\t\tvec = vec3(1, -st.y, -st.x);\n\t\t} else if (face == 1.0) {\n\t\t\t\tvec = vec3(-1, -st.y, st.x);\n\t\t} else if (face == 2.0) {\n\t\t\t\tvec = vec3(st.x, 1, st.y);\n\t\t} else if (face == 3.0) {\n\t\t\t\tvec = vec3(st.x, -1, -st.y);\n\t\t} else if (face == 4.0) {\n\t\t\t\tvec = vec3(st.x, -st.y, 1);\n\t\t} else {\n\t\t\t\tvec = vec3(-st.x, -st.y, -1);\n\t\t}\n\n\t\treturn normalize(modifySeams(vec, 1.0 / (1.0 - targetCubeSeamScale())));\n}\n\nmat3 matrixFromVector(vec3 n) { // frisvad\n\t\tfloat a = 1.0 / (1.0 + n.z);\n\t\tfloat b = -n.x * n.y * a;\n\t\tvec3 b1 = vec3(1.0 - n.x * n.x * a, b, -n.x);\n\t\tvec3 b2 = vec3(b, 1.0 - n.y * n.y * a, -n.y);\n\t\treturn mat3(b1, b2, n);\n}\n\nmat3 matrixFromVectorSlow(vec3 n) {\n\t\tvec3 up = (1.0 - abs(n.y) <= 0.0000001) ? vec3(0.0, 0.0, n.y > 0.0 ? 1.0 : -1.0) : vec3(0.0, 1.0, 0.0);\n\t\tvec3 x = normalize(cross(up, n));\n\t\tvec3 y = cross(n, x);\n\t\treturn mat3(x, y, n);\n}\n\nvec4 reproject() {\n\t\tif (NUM_SAMPLES <= 1) {\n\t\t\t\t// single sample\n\t\t\t\treturn ENCODE_FUNC(DECODE_FUNC(SOURCE_FUNC(TARGET_FUNC())));\n\t\t} else {\n\t\t\t\t// multi sample\n\t\t\t\tvec3 t = TARGET_FUNC();\n\t\t\t\tvec3 tu = dFdx(t);\n\t\t\t\tvec3 tv = dFdy(t);\n\n\t\t\t\tvec3 result = vec3(0.0);\n\t\t\t\tfor (float u = 0.0; u < NUM_SAMPLES_SQRT; ++u) {\n\t\t\t\t\t\tfor (float v = 0.0; v < NUM_SAMPLES_SQRT; ++v) {\n\t\t\t\t\t\t\t\tresult += DECODE_FUNC(SOURCE_FUNC(normalize(t +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttu * (u / NUM_SAMPLES_SQRT - 0.5) +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttv * (v / NUM_SAMPLES_SQRT - 0.5))));\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn ENCODE_FUNC(result / (NUM_SAMPLES_SQRT * NUM_SAMPLES_SQRT));\n\t\t}\n}\n\nvec4 unpackFloat = vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0);\n\n#ifdef USE_SAMPLES_TEX\n\t\tvoid unpackSample(int i, out vec3 L, out float mipLevel) {\n\t\t\t\tfloat u = (float(i * 4) + 0.5) * samplesTexInverseSize.x;\n\t\t\t\tfloat v = (floor(u) + 0.5) * samplesTexInverseSize.y;\n\n\t\t\t\tvec4 raw;\n\t\t\t\traw.x = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat); u += samplesTexInverseSize.x;\n\t\t\t\traw.y = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat); u += samplesTexInverseSize.x;\n\t\t\t\traw.z = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat); u += samplesTexInverseSize.x;\n\t\t\t\traw.w = dot(texture2D(samplesTex, vec2(u, v)), unpackFloat);\n\n\t\t\t\tL.xyz = raw.xyz * 2.0 - 1.0;\n\t\t\t\tmipLevel = raw.w * 8.0;\n\t\t}\n\n\t\t// convolve an environment given pre-generated samples\n\t\tvec4 prefilterSamples() {\n\t\t\t\t// construct vector space given target direction\n\t\t\t\tmat3 vecSpace = matrixFromVectorSlow(TARGET_FUNC());\n\n\t\t\t\tvec3 L;\n\t\t\t\tfloat mipLevel;\n\n\t\t\t\tvec3 result = vec3(0.0);\n\t\t\t\tfloat totalWeight = 0.0;\n\t\t\t\tfor (int i = 0; i < NUM_SAMPLES; ++i) {\n\t\t\t\t\t\tunpackSample(i, L, mipLevel);\n\t\t\t\t\t\tresult += DECODE_FUNC(SOURCE_FUNC(vecSpace * L, mipLevel)) * L.z;\n\t\t\t\t\t\ttotalWeight += L.z;\n\t\t\t\t}\n\n\t\t\t\treturn ENCODE_FUNC(result / totalWeight);\n\t\t}\n\n\t\t// unweighted version of prefilterSamples\n\t\tvec4 prefilterSamplesUnweighted() {\n\t\t\t\t// construct vector space given target direction\n\t\t\t\tmat3 vecSpace = matrixFromVectorSlow(TARGET_FUNC());\n\n\t\t\t\tvec3 L;\n\t\t\t\tfloat mipLevel;\n\n\t\t\t\tvec3 result = vec3(0.0);\n\t\t\t\tfloat totalWeight = 0.0;\n\t\t\t\tfor (int i = 0; i < NUM_SAMPLES; ++i) {\n\t\t\t\t\t\tunpackSample(i, L, mipLevel);\n\t\t\t\t\t\tresult += DECODE_FUNC(SOURCE_FUNC(vecSpace * L, mipLevel));\n\t\t\t\t}\n\n\t\t\t\treturn ENCODE_FUNC(result / float(NUM_SAMPLES));\n\t\t}\n#endif\n\nvoid main(void) {\n\t\tgl_FragColor = PROCESS_FUNC();\n}\n`;export{n as default};
