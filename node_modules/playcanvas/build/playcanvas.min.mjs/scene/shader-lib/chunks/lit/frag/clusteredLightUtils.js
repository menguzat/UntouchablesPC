var t="\n// Converts unnormalized direction vector to a cubemap face index [0..5] and uv coordinates within the face in [0..1] range.\n// Additionally offset to a tile in atlas within 3x3 subdivision is provided\nvec2 getCubemapFaceCoordinates(const vec3 dir, out float faceIndex, out vec2 tileOffset)\n{\n\t\tvec3 vAbs = abs(dir);\n\t\tfloat ma;\n\t\tvec2 uv;\n\t\tif (vAbs.z >= vAbs.x && vAbs.z >= vAbs.y) {   // front / back\n\n\t\t\t\tfaceIndex = dir.z < 0.0 ? 5.0 : 4.0;\n\t\t\t\tma = 0.5 / vAbs.z;\n\t\t\t\tuv = vec2(dir.z < 0.0 ? -dir.x : dir.x, -dir.y);\n\n\t\t\t\ttileOffset.x = 2.0;\n\t\t\t\ttileOffset.y = dir.z < 0.0 ? 1.0 : 0.0;\n\n\t\t} else if(vAbs.y >= vAbs.x) {  // top index 2, bottom index 3\n\n\t\t\t\tfaceIndex = dir.y < 0.0 ? 3.0 : 2.0;\n\t\t\t\tma = 0.5 / vAbs.y;\n\t\t\t\tuv = vec2(dir.x, dir.y < 0.0 ? -dir.z : dir.z);\n\n\t\t\t\ttileOffset.x = 1.0;\n\t\t\t\ttileOffset.y = dir.y < 0.0 ? 1.0 : 0.0;\n\n\t\t} else {    // left / right\n\n\t\t\t\tfaceIndex = dir.x < 0.0 ? 1.0 : 0.0;\n\t\t\t\tma = 0.5 / vAbs.x;\n\t\t\t\tuv = vec2(dir.x < 0.0 ? dir.z : -dir.z, -dir.y);\n\n\t\t\t\ttileOffset.x = 0.0;\n\t\t\t\ttileOffset.y = dir.x < 0.0 ? 1.0 : 0.0;\n\n\t\t}\n\t\treturn uv * ma + 0.5;\n}\n\n// converts unnormalized direction vector to a texture coordinate for a cubemap face stored within texture atlas described by the viewport\nvec2 getCubemapAtlasCoordinates(const vec3 omniAtlasViewport, float shadowEdgePixels, float shadowTextureResolution, const vec3 dir) {\n\n\t\tfloat faceIndex;\n\t\tvec2 tileOffset;\n\t\tvec2 uv = getCubemapFaceCoordinates(dir, faceIndex, tileOffset);\n\n\t\t// move uv coordinates inwards inside to compensate for larger fov when rendering shadow into atlas\n\t\tfloat atlasFaceSize = omniAtlasViewport.z;\n\t\tfloat tileSize = shadowTextureResolution * atlasFaceSize;\n\t\tfloat offset = shadowEdgePixels / tileSize;\n\t\tuv = uv * vec2(1.0 - offset * 2.0) + vec2(offset * 1.0);\n\n\t\t// scale uv coordinates to cube face area within the viewport\n\t\tuv *= atlasFaceSize;\n\n\t\t// offset into face of the atlas (3x3 grid)\n\t\tuv += tileOffset * atlasFaceSize;\n\n\t\t// offset into the atlas viewport\n\t\tuv += omniAtlasViewport.xy;\n\n\t\treturn uv;\n}\n";export{t as default};
