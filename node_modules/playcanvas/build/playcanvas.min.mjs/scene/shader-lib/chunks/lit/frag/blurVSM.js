var t="\nvarying vec2 vUv0;\n\nuniform sampler2D source;\nuniform vec2 pixelOffset;\n\n#ifdef GAUSS\nuniform float weight[SAMPLES];\n#endif\n\n#ifdef PACKED\nfloat decodeFloatRG(vec2 rg) {\n\t\treturn rg.y*(1.0/255.0) + rg.x;\n}\n\nvec2 encodeFloatRG( float v ) {\n\t\tvec2 enc = vec2(1.0, 255.0) * v;\n\t\tenc = fract(enc);\n\t\tenc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);\n\t\treturn enc;\n}\n#endif\n\nvoid main(void) {\n\t\tvec3 moments = vec3(0.0);\n\t\tvec2 uv = vUv0 - pixelOffset * (float(SAMPLES) * 0.5);\n\t\tfor (int i=0; i<SAMPLES; i++) {\n\t\t\t\tvec4 c = texture2D(source, uv + pixelOffset * float(i));\n\n\t\t\t\t#ifdef PACKED\n\t\t\t\tc.xy = vec2(decodeFloatRG(c.xy), decodeFloatRG(c.zw));\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef GAUSS\n\t\t\t\tmoments += c.xyz * weight[i];\n\t\t\t\t#else\n\t\t\t\tmoments += c.xyz;\n\t\t\t\t#endif\n\t\t}\n\n\t\t#ifndef GAUSS\n\t\tmoments /= float(SAMPLES);\n\t\t#endif\n\n\t\t#ifdef PACKED\n\t\tgl_FragColor = vec4(encodeFloatRG(moments.x), encodeFloatRG(moments.y));\n\t\t#else\n\t\tgl_FragColor = vec4(moments.x, moments.y, moments.z, 1.0);\n\t\t#endif\n}\n";export{t as default};
