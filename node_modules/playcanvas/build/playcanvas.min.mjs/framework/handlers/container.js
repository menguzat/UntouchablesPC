import{path as r}from"../../core/path.js";import{GlbContainerParser as t}from"../parsers/glb-container-parser.js";class e{instantiateModelEntity(r){return null}instantiateRenderEntity(r){return null}getMaterialVariants(){return null}applyMaterialVariant(r,t){}applyMaterialVariantInstances(r,t){}}class s{constructor(r){this.handlerType="container",this.glbContainerParser=new t(r.graphicsDevice,r.assets,0),this.parsers={}}set maxRetries(r){this.glbContainerParser.maxRetries=r;for(const t in this.parsers)this.parsers.hasOwnProperty(t)&&(this.parsers[t].maxRetries=r)}get maxRetries(){return this.glbContainerParser.maxRetries}_getUrlWithoutParams(r){return r.indexOf("?")>=0?r.split("?")[0]:r}_getParser(t){const e=t?r.getExtension(this._getUrlWithoutParams(t)).toLowerCase().replace(".",""):null;return this.parsers[e]||this.glbContainerParser}load(r,t,e){"string"==typeof r&&(r={load:r,original:r}),this._getParser(r.original).load(r,t,e)}open(r,t,e){return this._getParser(r).open(r,t,e)}patch(r,t){}}export{s as ContainerHandler,e as ContainerResource};
