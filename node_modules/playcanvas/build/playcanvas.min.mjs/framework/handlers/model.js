import{path as e}from"../../core/path.js";import{Http as r,http as t}from"../../platform/net/http.js";import{getDefaultMaterial as s}from"../../scene/materials/default-material.js";import{GlbModelParser as a}from"../parsers/glb-model.js";import{JsonModelParser as i}from"../parsers/json-model.js";class o{constructor(r){this.handlerType="model",this._parsers=[],this.device=r.graphicsDevice,this.assets=r.assets,this.defaultMaterial=s(this.device),this.maxRetries=0,this.addParser(new i(this),(function(r,t){return".json"===e.getExtension(r)})),this.addParser(new a(this),(function(r,t){return".glb"===e.getExtension(r)}))}load(s,a,i){"string"==typeof s&&(s={load:s,original:s});const o={retry:this.maxRetries>0,maxRetries:this.maxRetries};(s.load.startsWith("blob:")||s.load.startsWith("data:"))&&(".glb"===e.getExtension(s.original).toLowerCase()?o.responseType=r.ResponseType.ARRAY_BUFFER:o.responseType=r.ResponseType.JSON),t.get(s.load,o,((e,r)=>{if(a)if(e)a(`Error loading model: ${s.original} [${e}]`);else{for(let e=0;e<this._parsers.length;e++){const t=this._parsers[e];if(t.decider(s.original,r))return void t.parser.parse(r,((e,r)=>{e?a(e):a(null,r)}),i)}a("No parsers found")}}))}open(e,r){return r}patch(e,r){if(!e.resource)return;const t=e.data,s=this;e.resource.meshInstances.forEach((function(a,i){if(t.mapping){const o=function e(t){t.resource?a.material=t.resource:(t.once("load",e),r.load(t)),t.once("remove",(function(e){a.material===e.resource&&(a.material=s.defaultMaterial)}))};if(!t.mapping[i])return void(a.material=s.defaultMaterial);const n=t.mapping[i].material,l=t.mapping[i].path;let p;if(void 0!==n)n?(p=r.get(n),p?o(p):r.once("add:"+n,o)):a.material=s.defaultMaterial;else if(l){const s=e.getAbsoluteUrl(t.mapping[i].path);p=r.getByUrl(s),p?o(p):r.once("add:url:"+s,o)}}}))}addParser(e,r){this._parsers.push({parser:e,decider:r})}}export{o as ModelHandler};
