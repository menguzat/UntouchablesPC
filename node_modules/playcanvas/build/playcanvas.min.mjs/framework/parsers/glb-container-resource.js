import"../../core/debug.js";import{MeshInstance as t}from"../../scene/mesh-instance.js";import{Model as e}from"../../scene/model.js";import{MorphInstance as s}from"../../scene/morph-instance.js";import{SkinInstance as n}from"../../scene/skin-instance.js";import{SkinInstanceCache as a}from"../../scene/skin-instance-cache.js";import{Entity as i}from"../entity.js";import{Asset as r}from"../asset/asset.js";class o{constructor(t,e,s,n){const a=function(t,n,a){const i=o.createAsset(e.name,t,n,a);return s.add(i),i},i=[];for(let e=0;e<t.renders.length;++e)i.push(a("render",t.renders[e],e));const r=[];for(let e=0;e<t.materials.length;++e)r.push(a("material",t.materials[e],e));const l=[];for(let e=0;e<t.animations.length;++e)l.push(a("animation",t.animations[e],e));this.data=t,this._model=null,this._assetName=e.name,this._assets=s,this._defaultMaterial=n,this.renders=i,this.materials=r,this.textures=t.textures,this.animations=l}get model(){if(!this._model){const t=o.createModel(this.data,this._defaultMaterial),e=o.createAsset(this._assetName,"model",t,0);this._assets.add(e),this._model=e}return this._model}static createAsset(t,e,s,n){const a=new r(t+"/"+e+"/"+n,e,{url:""});return a.resource=s,a.loaded=!0,a}instantiateModelEntity(t){const e=new i;return e.addComponent("model",Object.assign({type:"asset",asset:this.model},t)),e}instantiateRenderEntity(e){const n=this._defaultMaterial,r=[],l=function(e,a,i,o,l,h,c){const m=l[i.id],d=void 0===m?n:o[m],u=new t(i,d);return i.morph&&(u.morphInstance=new s(i.morph)),c.hasOwnProperty("skin")&&r.push({meshInstance:u,rootBone:e,entity:a}),u},h=(t,s,n)=>{const a=new i;s._cloneInternal(a),t||(t=a);let r=null,o=null;for(let e=0;e<n.nodes.length;e++){if(n.nodes[e]===s){const s=n.gltf.nodes[e];if(s.hasOwnProperty("mesh")){const e=n.renders[s.mesh].meshes;o=this.renders[s.mesh];for(let i=0;i<e.length;i++){const o=e[i];if(o){const e=l(t,a,o,n.materials,n.meshDefaultMaterials,n.skins,s);r||(r=[]),r.push(e)}}}if(n.lights){const t=n.lights.get(s);t&&a.addChild(t.clone())}if(n.cameras){const t=n.cameras.get(s);t&&t.camera.system.cloneComponent(t,a)}}}r&&(a.addComponent("render",Object.assign({type:"asset",meshInstances:r,rootBone:t},e)),a.render.assignAsset(o));const c=s.children;for(let e=0;e<c.length;e++){const s=h(t,c[e],n);a.addChild(s)}return a},c=[];for(const t of this.data.scenes)c.push(h(null,t,this.data));return r.forEach((t=>{t.meshInstance.skinInstance=a.createCachedSkinInstance(t.meshInstance.mesh.skin,t.rootBone,t.entity)})),o.createSceneHierarchy(c,"Entity")}getMaterialVariants(){return this.data.variants?Object.keys(this.data.variants):[]}applyMaterialVariant(t,e){const s=e?this.data.variants[e]:null;if(void 0===s)return;const n=t.findComponents("render");for(let t=0;t<n.length;t++){const e=n[t];this._applyMaterialVariant(s,e.meshInstances)}}applyMaterialVariantInstances(t,e){const s=e?this.data.variants[e]:null;void 0!==s&&this._applyMaterialVariant(s,t)}_applyMaterialVariant(t,e){e.forEach((e=>{if(null===t)e.material=this._defaultMaterial;else{const s=this.data.meshVariants[e.mesh.id];s&&(e.material=this.data.materials[s[t]])}}))}static createSceneHierarchy(t,e){let s=null;if(1===t.length)s=t[0];else{s=new e("SceneGroup");for(const e of t)s.addChild(e)}return s}static createModel(a,i){const r=function(e,n,r,o,l,h,c){const m=a.meshDefaultMaterials[n.id],d=void 0===m?i:l[m],u=new t(n,d,h);if(n.morph){const t=new s(n.morph);u.morphInstance=t,e.morphInstances.push(t)}if(c.hasOwnProperty("skin")){const t=c.skin,s=r[t];n.skin=s;const a=o[t];u.skinInstance=a,e.skinInstances.push(a)}e.meshInstances.push(u)},l=new e,h=[];for(const t of a.skins){const e=new n(t);e.bones=t.bones,h.push(e)}l.graph=o.createSceneHierarchy(a.scenes,"GraphNode");for(let t=0;t<a.nodes.length;t++){const e=a.nodes[t];if(e.root===l.graph){const s=a.gltf.nodes[t];if(s.hasOwnProperty("mesh")){const t=a.renders[s.mesh].meshes;for(let n=0;n<t.length;n++){const i=t[n];i&&r(l,i,a.skins,h,a.materials,e,s)}}}}return l}destroy(){const t=this._assets,e=function(e){t.remove(e),e.unload()},s=function(t){t.forEach((function(t){e(t)}))};this.animations&&(s(this.animations),this.animations=null),this.textures&&(s(this.textures),this.textures=null),this.materials&&(s(this.materials),this.materials=null),this.renders&&(s(this.renders),this.renders=null),this._model&&(e(this._model),this._model=null),this.data=null,this.assets=null}}export{o as GlbContainerResource};
