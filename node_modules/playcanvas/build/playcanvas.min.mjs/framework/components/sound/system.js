import"../../../core/debug.js";import{hasAudioContext as o}from"../../../platform/audio/capabilities.js";import{Component as t}from"../component.js";import{ComponentSystem as e}from"../system.js";import{SoundComponent as s}from"./component.js";import{SoundComponentData as n}from"./data.js";const a=["enabled"];class i extends e{constructor(o){super(o),this.id="sound",this.ComponentType=s,this.DataType=n,this.schema=a,this.manager=o.soundManager,this.app.systems.on("update",this.onUpdate,this),this.on("beforeremove",this.onBeforeRemove,this)}set volume(o){this.manager.volume=o}get volume(){return this.manager.volume}get context(){return o()?this.manager.context:null}initializeComponentData(o,t,e){e=["volume","pitch","positional","refDistance","maxDistance","rollOffFactor","distanceModel","slots"];for(let s=0;s<e.length;s++)t.hasOwnProperty(e[s])&&(o[e[s]]=t[e[s]]);super.initializeComponentData(o,t,["enabled"])}cloneComponent(o,t){const e=o.sound,s=e.slots,n={};for(const o in s){const t=s[o];n[o]={name:t.name,volume:t.volume,pitch:t.pitch,loop:t.loop,duration:t.duration,startTime:t.startTime,overlap:t.overlap,autoPlay:t.autoPlay,asset:t.asset}}const a={distanceModel:e.distanceModel,enabled:e.enabled,maxDistance:e.maxDistance,pitch:e.pitch,positional:e.positional,refDistance:e.refDistance,rollOffFactor:e.rollOffFactor,slots:n,volume:e.volume};return this.addComponent(t,a)}onUpdate(o){const t=this.store;for(const o in t)if(t.hasOwnProperty(o)){const e=t[o].entity;if(e.enabled){const o=e.sound;if(o.enabled&&o.positional){const t=e.getPosition(),s=o.slots;for(const o in s)s[o].updatePosition(t)}}}}onBeforeRemove(o,t){const e=t.slots;for(const o in e)e[o].overlap||e[o].stop();t.onRemove()}destroy(){super.destroy(),this.app.systems.off("update",this.onUpdate,this)}}t._buildAccessors(s.prototype,a);export{i as SoundComponentSystem};
