import{Vec3 as t}from"./vec3.js";class s{constructor(){this.data=new Float32Array(9),this.data[0]=this.data[4]=this.data[8]=1}clone(){return(new(0,this.constructor)).copy(this)}copy(t){const s=t.data,a=this.data;return a[0]=s[0],a[1]=s[1],a[2]=s[2],a[3]=s[3],a[4]=s[4],a[5]=s[5],a[6]=s[6],a[7]=s[7],a[8]=s[8],this}set(t){const s=this.data;return s[0]=t[0],s[1]=t[1],s[2]=t[2],s[3]=t[3],s[4]=t[4],s[5]=t[5],s[6]=t[6],s[7]=t[7],s[8]=t[8],this}equals(t){const s=this.data,a=t.data;return s[0]===a[0]&&s[1]===a[1]&&s[2]===a[2]&&s[3]===a[3]&&s[4]===a[4]&&s[5]===a[5]&&s[6]===a[6]&&s[7]===a[7]&&s[8]===a[8]}isIdentity(){const t=this.data;return 1===t[0]&&0===t[1]&&0===t[2]&&0===t[3]&&1===t[4]&&0===t[5]&&0===t[6]&&0===t[7]&&1===t[8]}setIdentity(){const t=this.data;return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,this}toString(){return"["+this.data.join(", ")+"]"}transpose(){const t=this.data;let s;return s=t[1],t[1]=t[3],t[3]=s,s=t[2],t[2]=t[6],t[6]=s,s=t[5],t[5]=t[7],t[7]=s,this}setFromMat4(t){const s=t.data,a=this.data;return a[0]=s[0],a[1]=s[1],a[2]=s[2],a[3]=s[4],a[4]=s[5],a[5]=s[6],a[6]=s[8],a[7]=s[9],a[8]=s[10],this}transformVector(s,a=new t){const r=this.data,e=s.x,n=s.y,i=s.z;return a.x=e*r[0]+n*r[3]+i*r[6],a.y=e*r[1]+n*r[4]+i*r[7],a.z=e*r[2]+n*r[5]+i*r[8],a}}s.IDENTITY=Object.freeze(new s),s.ZERO=Object.freeze((new s).set([0,0,0,0,0,0,0,0,0]));export{s as Mat3};
