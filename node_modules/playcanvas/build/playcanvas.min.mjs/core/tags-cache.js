class i{constructor(i=null){this._index={},this._key=void 0,this._key=i}addItem(i){const t=i.tags._list;for(const e of t)this.add(e,i)}removeItem(i){const t=i.tags._list;for(const e of t)this.remove(e,i)}add(i,t){this._index[i]&&-1!==this._index[i].list.indexOf(t)||(this._index[i]||(this._index[i]={list:[]},this._key&&(this._index[i].keys={})),this._index[i].list.push(t),this._key&&(this._index[i].keys[t[this._key]]=t))}remove(i,t){if(!this._index[i])return;if(this._key&&!this._index[i].keys[t[this._key]])return;const e=this._index[i].list.indexOf(t);-1!==e&&(this._index[i].list.splice(e,1),this._key&&delete this._index[i].keys[t[this._key]],0===this._index[i].list.length&&delete this._index[i])}find(i){const t={},e=[];let s,n,h,_,d;const l=(i,t)=>this._index[i].list.length-this._index[t].list.length;for(let o=0;o<i.length;o++){if(n=i[o],n instanceof Array){if(0===n.length)continue;if(1!==n.length){d=!1;for(let i=0;i<n.length;i++)if(!this._index[n[i]]){d=!0;break}if(d)continue;h=n.slice(0).sort(l),_=h.slice(1),1===_.length&&(_=_[0]);for(let i=0;i<this._index[h[0]].list.length;i++)s=this._index[h[0]].list[i],(this._key?!t[s[this._key]]:-1===e.indexOf(s))&&s.tags.has(_)&&(this._key&&(t[s[this._key]]=!0),e.push(s));continue}n=n[0]}if(n&&"string"==typeof n&&this._index[n])for(let i=0;i<this._index[n].list.length;i++)s=this._index[n].list[i],this._key?t[s[this._key]]||(t[s[this._key]]=!0,e.push(s)):-1===e.indexOf(s)&&e.push(s)}return e}}export{i as TagsCache};
